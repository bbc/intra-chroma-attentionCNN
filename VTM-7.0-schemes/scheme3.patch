diff --git a/source/Lib/CommonLib/CommonDef.h b/source/Lib/CommonLib/CommonDef.h
index 1732b46..44612e8 100644
--- a/source/Lib/CommonLib/CommonDef.h
+++ b/source/Lib/CommonLib/CommonDef.h
@@ -232,7 +232,11 @@ static const int MULTI_REF_LINE_IDX[4] =               { 0, 1, 3, 0 };
 static const int PRED_REG_MIN_WIDTH =                               4;  // Minimum prediction region width for ISP subblocks
 
 static const int NUM_LUMA_MODE =                                   67; ///< Planar + DC + 65 directional mode (4*16 + 1)
+#if NN_CHROMA_PRED_SIGNAL
+static const int NUM_LMC_MODE = 1 + 3; ///< LMC + MDLM_T + MDLM_L
+#else
 static const int NUM_LMC_MODE =                                    1 + 2; ///< LMC + MDLM_T + MDLM_L
+#endif
 static const int NUM_INTRA_MODE = (NUM_LUMA_MODE + NUM_LMC_MODE);
 
 static const int NUM_EXT_LUMA_MODE =                               28;
@@ -251,6 +255,9 @@ static const int NUM_CHROMA_MODE = (5 + NUM_LMC_MODE); ///< total number of chro
 static const int LM_CHROMA_IDX = NUM_LUMA_MODE; ///< chroma mode index for derived from LM mode
 static const int MDLM_L_IDX =                          LM_CHROMA_IDX + 1; ///< MDLM_L
 static const int MDLM_T_IDX =                          LM_CHROMA_IDX + 2; ///< MDLM_T
+#if NN_CHROMA_PRED_SIGNAL
+static const int LM_CHROMA_NN =                        LM_CHROMA_IDX + 3; ///< LM_CHROMA_NN
+#endif
 static const int DM_CHROMA_IDX =                       NUM_INTRA_MODE; ///< chroma mode index for derived from luma intra mode
 
 static const uint32_t  NUM_TRAFO_MODES_MTS =                            6; ///< Max Intra CU size applying EMT, supported values: 8, 16, 32, 64, 128
@@ -516,6 +523,9 @@ struct ClpRngs
 template <typename T> inline T Clip3 (const T minVal, const T maxVal, const T a) { return std::min<T> (std::max<T> (minVal, a) , maxVal); }  ///< general min/max clip
 template <typename T> inline T ClipBD( const T x, const int bitDepth ) { return Clip3( T( 0 ), T( ( 1 << bitDepth ) - 1 ), x ); }
 template <typename T> inline T ClipPel (const T a, const ClpRng& clpRng)         { return std::min<T> (std::max<T> (clpRng.min, a) , clpRng.max); }  ///< clip reconstruction
+#if NN_CHROMA_PRED
+inline long RELU(long a) { return a > 0 ? a : 0; }
+#endif 
 
 template <typename T> inline void Check3( T minVal, T maxVal, T a)
 {
diff --git a/source/Lib/CommonLib/Contexts.cpp b/source/Lib/CommonLib/Contexts.cpp
index 3280c08..1f95cc1 100755
--- a/source/Lib/CommonLib/Contexts.cpp
+++ b/source/Lib/CommonLib/Contexts.cpp
@@ -322,6 +322,15 @@ const CtxSet ContextSetCfg::CclmModeFlag = ContextSetCfg::addCtxSet
   {   4, },
 });
 
+#if NN_CHROMA_PRED_SIGNAL_SEPARATE
+const CtxSet ContextSetCfg::CclmNnModeFlag = ContextSetCfg::addCtxSet
+({
+  { 26, },
+  { 34, },
+  { 59, },
+  { 4, },
+  });
+#endif
 #if JVET_P0615_CHROMAMODE_CLEANUP
 const CtxSet ContextSetCfg::CclmModeIdx = ContextSetCfg::addCtxSet
 ({
diff --git a/source/Lib/CommonLib/Contexts.h b/source/Lib/CommonLib/Contexts.h
index 519f6ac..a905886 100644
--- a/source/Lib/CommonLib/Contexts.h
+++ b/source/Lib/CommonLib/Contexts.h
@@ -208,6 +208,9 @@ public:
   static const CtxSet   IntraLumaMpmFlag;
   static const CtxSet   IntraLumaPlanarFlag;
   static const CtxSet   CclmModeFlag;
+#if NN_CHROMA_PRED_SIGNAL_SEPARATE
+  static const CtxSet   CclmNnModeFlag;
+#endif
 #if JVET_P0615_CHROMAMODE_CLEANUP
   static const CtxSet   CclmModeIdx;
 #endif
diff --git a/source/Lib/CommonLib/IntraPrediction.cpp b/source/Lib/CommonLib/IntraPrediction.cpp
index ad24b54..8d8ebc3 100644
--- a/source/Lib/CommonLib/IntraPrediction.cpp
+++ b/source/Lib/CommonLib/IntraPrediction.cpp
@@ -1417,7 +1417,18 @@ void IntraPrediction::xGetLumaRecPixels(const PredictionUnit &pu, CompArea chrom
   int iDstStride = 0;
   Pel* pDst0 = 0;
   int curChromaMode = pu.intraDir[1];
+#if NN_CHROMA_PRED && !NN_CHROMA_PRED_SIGNAL
+  if (curChromaMode == LM_CHROMA_IDX && ((chromaArea.width == 4 && chromaArea.height == 4) || (chromaArea.width == 8 && chromaArea.height == 8) || (chromaArea.width == 16 && chromaArea.height == 16)))
+  {
+    curChromaMode = MDLM_L_IDX;
+  }
+#endif
+
+#if NN_CHROMA_PRED_SIGNAL
+  if ((curChromaMode == LM_CHROMA_NN) || (curChromaMode == MDLM_L_IDX) || (curChromaMode == MDLM_T_IDX))
+#else
   if ((curChromaMode == MDLM_L_IDX) || (curChromaMode == MDLM_T_IDX))
+#endif
   {
     iDstStride = 2 * MAX_CU_SIZE + 1;
     pDst0 = m_pMdlmTemp + iDstStride + 1;
@@ -1535,7 +1546,11 @@ void IntraPrediction::xGetLumaRecPixels(const PredictionUnit &pu, CompArea chrom
   {
     pDst  = pDst0    - iDstStride;
     int addedAboveRight = 0;
+#if NN_CHROMA_PRED_SIGNAL
+    if ((curChromaMode == LM_CHROMA_NN) || (curChromaMode == MDLM_L_IDX) || (curChromaMode == MDLM_T_IDX))
+#else
     if ((curChromaMode == MDLM_L_IDX) || (curChromaMode == MDLM_T_IDX))
+#endif
     {
       addedAboveRight = avaiAboveRightUnits*chromaUnitWidth;
     }
@@ -1595,7 +1610,11 @@ void IntraPrediction::xGetLumaRecPixels(const PredictionUnit &pu, CompArea chrom
     piSrc = pRecSrc0 - 2 - logSubWidthC;
 
     int addedLeftBelow = 0;
+#if NN_CHROMA_PRED_SIGNAL
+    if ((curChromaMode == LM_CHROMA_NN) || (curChromaMode == MDLM_L_IDX) || (curChromaMode == MDLM_T_IDX))
+#else
     if ((curChromaMode == MDLM_L_IDX) || (curChromaMode == MDLM_T_IDX))
+#endif
     {
       addedLeftBelow = avaiLeftBelowUnits*chromaUnitHeight;
     }
@@ -1628,6 +1647,33 @@ void IntraPrediction::xGetLumaRecPixels(const PredictionUnit &pu, CompArea chrom
     }
   }
 
+#if NN_CHROMA_PRED
+  // recover LT references for NN chroma prediction
+#if NN_CHROMA_PRED_SIGNAL
+  if ((curChromaMode == LM_CHROMA_NN) &&  bAboveAvaillable && bLeftAvaillable)
+#else
+  if (bAboveAvaillable && bLeftAvaillable)
+#endif
+  {
+    pDst = pDst0 - 1 - iDstStride;
+
+    piSrc = pRecSrc0 - 2 - logSubWidthC - iRecStride2;
+
+    if (pu.cs->sps->getCclmCollocatedChromaFlag())
+    {
+      pDst[0] = (piSrc[1 - strOffset] * c0_5tap
+        + piSrc[1] * c1_5tap + piSrc[0] * c2_5tap + piSrc[2] * c3_5tap
+        + piSrc[1 + strOffset] * c4_5tap
+        + offset_5tap) >> shift_5tap;
+    }
+    else 
+    {
+      pDst[0] = ((piSrc[1] * c0_6tap + piSrc[0] * c1_6tap + piSrc[2] * c2_6tap)
+        + (piSrc[1 + strOffset] * c3_6tap + piSrc[strOffset] * c4_6tap + piSrc[2 + strOffset] * c5_6tap)
+        + offset_6tap) >> shift_6tap;
+    }
+  }
+#endif
   // inner part from reconstructed picture buffer
   for( int j = 0; j < uiCHeight; j++ )
   {
@@ -1969,6 +2015,72 @@ void IntraPrediction::predIntraMip( const ComponentID compId, PelBuf &piPred, co
   }
 #endif
 }
+#if NN_CHROMA_PRED
+void IntraPrediction::initNNIntraChroma(const PredictionUnit &pu, const CompArea& area)
+{
+  Pel *ptrSrcCb = getPredictorPtr(COMPONENT_Cb);
+  Pel *ptrSrcCr = getPredictorPtr(COMPONENT_Cr);
+
+  const int srcStride = 2 * MAX_CU_SIZE + 1;
+  
+  // Compute availability
+  const CodingUnit &cu = *(pu.cu);
+  const Position posLT = area;
+
+  int leftUnits = 2 * area.height;
+  int aboveUnits = 2 * area.width;
+  int totalUnits = leftUnits + aboveUnits;
+
+  bool neighborFlags[4 * MAX_NUM_PART_IDXS_IN_CTU_WIDTH + 1];
+  memset(neighborFlags, 0, totalUnits);
+
+  int availableAbove =
+    isAboveAvailable(cu, CHANNEL_TYPE_CHROMA, posLT, aboveUnits, 1,
+    (neighborFlags + leftUnits + 1));
+
+  int availableLeft =
+    isLeftAvailable(cu, CHANNEL_TYPE_CHROMA, posLT, leftUnits, 1,
+    (neighborFlags + leftUnits - 1));
+
+  const int availableRefs[2] = {availableAbove, availableLeft};
+
+  PelBuf pColY = PelBuf(m_pMdlmTemp + srcStride + 1, srcStride, Size(area));
+
+  m_NNIntraChromaPred.prepareInputForPred(ptrSrcCb, ptrSrcCr, pColY,
+    area, m_refBufferStride, availableRefs, pu.cu->slice->getSPS()->getBitDepth(CHANNEL_TYPE_LUMA));
+}
+
+
+void IntraPrediction::predIntraNN(PelBuf &piPredCb, PelBuf &piPredCr, const PredictionUnit &pu, ComponentID compID, const ClpRng& clpRng)
+{
+  static_vector<int16_t, MIP_MAX_WIDTH * MIP_MAX_HEIGHT> predNNCb(piPredCb.width * piPredCb.height);
+  static_vector<int16_t, MIP_MAX_WIDTH * MIP_MAX_HEIGHT> predNNCr(piPredCb.width * piPredCb.height);
+  m_NNIntraChromaPred.predBlock(predNNCb.data(), predNNCr.data());
+  
+  // Update both components if compID == COMPONENT_Y (default case)
+
+  if (compID != COMPONENT_Cr)
+  {
+    for (int y = 0; y < piPredCb.height; y++)
+    {
+      for (int x = 0; x < piPredCb.width; x++)
+      {
+        piPredCb.at(x, y) = ClipPel(Pel(predNNCb[y * piPredCb.width + x]), clpRng);
+      }
+    }
+  }
+  if (compID != COMPONENT_Cb)
+  {
+    for (int y = 0; y < piPredCr.height; y++)
+    {
+      for (int x = 0; x < piPredCr.width; x++)
+      {
+        piPredCr.at(x, y) = ClipPel(Pel(predNNCr[y * piPredCr.width + x]), clpRng);
+      }
+    }
+  }
+}
+#endif
 #if !JVET_P0077_LINE_CG_PALETTE
 bool IntraPrediction::calCopyRun(CodingStructure &cs, Partitioner& partitioner, uint32_t startPos, uint32_t total, uint32_t &run, ComponentID compBegin)
 {
diff --git a/source/Lib/CommonLib/IntraPrediction.h b/source/Lib/CommonLib/IntraPrediction.h
index d96b8f0..7f7e69d 100644
--- a/source/Lib/CommonLib/IntraPrediction.h
+++ b/source/Lib/CommonLib/IntraPrediction.h
@@ -45,6 +45,7 @@
 #include "Picture.h"
 
 #include "MatrixIntraPrediction.h"
+#include "NNIntraChromaPrediction.h"
 
 //! \ingroup CommonLib
 //! \{
@@ -109,6 +110,9 @@ private:
   MatrixIntraPrediction m_matrixIntraPred;
 
 
+#if NN_CHROMA_PRED
+  NNIntraChromaPrediction m_NNIntraChromaPred;
+#endif
 
 protected:
   ChromaFormat  m_currChromaFormat;
@@ -187,6 +191,12 @@ public:
   bool calCopyRun                 (CodingStructure &cs, Partitioner& partitioner, uint32_t startPos, uint32_t total, uint32_t &run, ComponentID compBegin);
   bool calIndexRun                (CodingStructure &cs, Partitioner& partitioner, uint32_t startPos, uint32_t total, uint32_t &run, ComponentID compBegin);
 #endif
+
+  // NN Intra Chroma Prediction
+#if NN_CHROMA_PRED
+  void initNNIntraChroma(const PredictionUnit &pu, const CompArea& area);
+  void predIntraNN(PelBuf &piPredCb, PelBuf &piPredCr, const PredictionUnit &pu, ComponentID compID, const ClpRng& clpRng);
+#endif
 };
 
 //! \}
diff --git a/source/Lib/CommonLib/NNIntraChromaPrediction.cpp b/source/Lib/CommonLib/NNIntraChromaPrediction.cpp
new file mode 100644
index 0000000..a00e5a9
--- /dev/null
+++ b/source/Lib/CommonLib/NNIntraChromaPrediction.cpp
@@ -0,0 +1,426 @@
+/*
+* Copyright 2021 BBC Research & Development
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*     http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*
+* ==============================================================================
+*/
+
+/** \file     NNIntraChromaPrediction.cpp
+\brief    NN-based intra chroma prediction class
+*/
+
+#include "NNIntraChromaPrediction.h"
+#include "dtrace_next.h"
+
+#include "UnitTools.h"
+
+NNIntraChromaPrediction::NNIntraChromaPrediction() :
+
+  m_refSamplesY(NN_MAX_BOUNDARY_SIZE),
+  m_refSamplesCb(NN_MAX_BOUNDARY_SIZE),
+  m_refSamplesCr(NN_MAX_BOUNDARY_SIZE),
+  m_collocatedSamplesY(NN_MAX_OUTPUT_SAMPLES),
+
+  m_boundary1Pred(NN_MAX_BOUNDARY_SIZE * NN_MAX_CHANNEL_SIZE),
+  m_padCollocatedSamplesY(NN_MAX_OUTPUT_SAMPLES),
+  m_inputPatchesY(NN_MAX_OUTPUT_SAMPLES * NN_MAX_CHANNEL_SIZE),
+  m_padAttPred(NN_MAX_OUTPUT_SAMPLES * NN_MAX_CHANNEL_SIZE),
+
+  m_attbPred(NN_MAX_BOUNDARY_SIZE * NN_MAX_CHANNEL_SIZE),
+  m_attxPred(NN_MAX_BOUNDARY_SIZE * NN_MAX_CHANNEL_SIZE),
+  m_attx1Pred(NN_MAX_BOUNDARY_SIZE * NN_MAX_CHANNEL_SIZE),
+  m_attSoftmax(NN_MAX_OUTPUT_SAMPLES),
+  m_preAttMap(NN_MAX_BOUNDARY_SIZE * NN_MAX_OUTPUT_SAMPLES),
+  m_attMap(NN_MAX_BOUNDARY_SIZE * NN_MAX_OUTPUT_SAMPLES),
+
+  m_bound1Size(0, 0),
+  m_bound2Size(0, 0),
+  m_lumaSize(0, 0),
+  m_attbSize(0, 0),
+  m_attxSize(0, 0),
+  m_attx1Size(0, 0),
+  m_attMapSize(0, 0)
+{
+}
+
+void NNIntraChromaPrediction::prepareInputForPred(Pel* pSrcCb, Pel* pSrcCr, PelBuf pColY, const Area& block, uint32_t* stride, const int* availableRefs, const int bitDepth)
+{
+  initPredBlockParams(block);
+
+  CHECK(bitDepth != 10, "Only 10 bit internal bit depth available");
+  Pel valueDC = 1 << (bitDepth - 1);
+  int availableUnits;
+
+  uint32_t dstStride = 2 * block.height;
+  uint32_t chromaStride = stride[COMPONENT_Cb];
+  uint32_t lumaStride = 2 * MAX_CU_SIZE + 1;
+
+  Pel *srcCb, *srcCr, *srcY, *refY;
+
+  refY = pColY.bufAt(0, 0);
+  srcCb = pSrcCb + 1;
+  srcCr = pSrcCr + 1;
+
+  m_refSamplesCb.resize((2 * block.width) + (2 * block.height) + 1);
+  m_refSamplesCr.resize((2 * block.width) + (2 * block.height) + 1);
+  m_refSamplesY.resize((2 * block.width) + (2 * block.height) + 1);
+  m_collocatedSamplesY.resize(block.width * block.height);
+
+  srcY = refY - lumaStride;
+  availableUnits = availableRefs[0];
+  for (int x = 0; x < availableUnits; x++)
+  {
+    m_refSamplesCb[dstStride + 1 + x] = srcCb[x];
+    m_refSamplesCr[dstStride + 1 + x] = srcCr[x];
+    m_refSamplesY[dstStride + 1 + x] = srcY[x];
+  }
+  for (int x = availableUnits; x < 2 * block.width; x++)
+  {
+    m_refSamplesCb[dstStride + 1 + x] = valueDC;
+    m_refSamplesCr[dstStride + 1 + x] = valueDC;
+    m_refSamplesY[dstStride + 1 + x] = valueDC;
+  }
+  srcY = refY - 1;
+  availableUnits = availableRefs[1];
+  for (int y = 0; y < availableUnits; y++)
+  {
+    m_refSamplesCb[dstStride - 1 - y] = srcCb[chromaStride + y];
+    m_refSamplesCr[dstStride - 1 - y] = srcCr[chromaStride + y];
+    m_refSamplesY[dstStride - 1 - y] = srcY[lumaStride * y];
+  }
+  for (int y = availableUnits; y < 2 * block.height; y++)
+  {
+    m_refSamplesCb[dstStride - 1 - y] = valueDC;
+    m_refSamplesCr[dstStride - 1 - y] = valueDC;
+    m_refSamplesY[dstStride - 1 - y] = valueDC;
+  }
+  if (availableRefs[0] > 0 && availableRefs[1] > 0)
+  {
+    m_refSamplesCb[dstStride] = pSrcCb[0];
+    m_refSamplesCr[dstStride] = pSrcCr[0];
+    m_refSamplesY[dstStride] = srcY[0];
+  }
+  else
+  {
+    m_refSamplesCb[dstStride] = valueDC;
+    m_refSamplesCr[dstStride] = valueDC;
+    m_refSamplesY[dstStride] = valueDC;
+  }
+  for (int x = 0; x < block.width; x++)
+  {
+    for (int y = 0; y < block.height; y++) { m_collocatedSamplesY[y * block.width + x] = (long)refY[y * lumaStride + x]; }
+  }
+}
+
+void NNIntraChromaPrediction::matrixPred(long* input, long* output, const long*& matrix, const long*& bias, Size inputSize, Size outputSize, int shift)
+{
+  long value;
+  for (int y = 0; y < outputSize.height; y++)
+  {
+    for (int x = 0; x < outputSize.width; x++)
+    {
+      value = bias[x];
+      for (int j = 0; j < inputSize.width; j++) { value += (input[y * inputSize.width + j] * matrix[x * inputSize.width + j]); }
+      output[y * outputSize.width + x] = (RELU(value) + (1 << (shift - 1))) >> shift;
+    }
+  }
+}
+
+void NNIntraChromaPrediction::padInput(long* const input, long* const output, Size inputSize, int units, int channels)
+{
+  // TODO: Support 3D padding with channels parameter
+
+  int pad_units = units << 1;
+  int block_stride = inputSize.width * inputSize.height;
+  int inPos, outPos;
+
+  for (int y = 0; y < inputSize.height + pad_units; y++)
+  {
+    for (int x = 0; x < inputSize.width + pad_units; x++)
+    {
+      outPos = y * (inputSize.width + pad_units) + x;
+      for (int c = 0; c < channels; c++)
+      {
+        output[outPos * channels + c] = 0;
+      }
+    }
+  }
+  for (int j = 0; j < inputSize.height; j++)
+  {
+    for (int i = 0; i < inputSize.width; i++)
+    {
+      for (int c = 0; c < channels; c++)
+      {
+        inPos = j * inputSize.width + i;
+        outPos = (j + units) * (inputSize.width + pad_units) + (i + units);
+        output[outPos * channels + c] = input[inPos * channels + c];
+      }
+    }
+  }
+}
+
+void NNIntraChromaPrediction::getAttMap(long* const attbPred, long* const attxPred)
+{
+  m_preAttMap.resize(m_attMapSize.width * m_attMapSize.height);
+  m_attMap.resize(m_attMapSize.width * m_attMapSize.height);
+  m_attSoftmax.resize(m_attMapSize.width);
+
+  long* const preAtt = m_preAttMap.data();
+  long* const attMap = m_attMap.data();
+  long* const attSoftmax = m_attSoftmax.data();
+  long baseStride = m_attxSize.width;
+  long outStride = m_attMapSize.width;
+
+  const long *expTable, *sumTable;
+  expTable = &exp_table[0];
+  sumTable = &sum_table[0];
+
+  long value;
+  for (int y = 0; y < m_attMapSize.height; y++)
+  {
+    for (int x = 0; x < m_attMapSize.width; x++)
+    {
+      value = 0;
+      for (int i = 0; i < baseStride; i++) { value += attxPred[y * baseStride + i] * attbPred[x * baseStride + i]; }
+      preAtt[y * outStride + x] = (value + (1 << (SHIFT_PREATT - 1))) >> SHIFT_PREATT;
+    }
+  }
+  long long softValue, sumFactor = 0;
+  long expValue, sumValue, colsMax;
+  for (int y = 0; y < m_attMapSize.height; y++)
+  {
+    for (int x = 0; x < m_attMapSize.width; x++) { attSoftmax[x] = preAtt[y * m_attMapSize.width + x] << 1; }
+    colsMax = *std::max_element(std::begin(m_attSoftmax), std::end(m_attSoftmax));
+    for (int x = 0; x < m_attMapSize.width; x++) { attSoftmax[x] = std::max((long)-10, attSoftmax[x] - colsMax); }
+    sumValue = 0;
+    for (int x = 0; x < m_attMapSize.width; x++)
+    {
+      expValue = expTable[(EXP_TABLE_SIZE - 2) - (abs(attSoftmax[x]) << (EXP_BIT_TABLE - EXP_BIT_STEP))];
+      attSoftmax[x] = expValue;
+      sumValue += expValue;
+    }
+    sumFactor = (long long)sumTable[(sumValue >> SUM_BIT_STEP) - (1 << (SUM_BIT_PRECISION - SUM_BIT_STEP))];
+    for (int x = 0; x < m_attMapSize.width; x++)
+    {
+      softValue = attSoftmax[x] * sumFactor;
+      attMap[y * m_attMapSize.width + x] = (long)((softValue) >> SHIFT_SOFTMAX);
+    }
+  }
+}
+
+void NNIntraChromaPrediction::applyBoundaryBranch(long* boundaryPred)
+{
+  Pel* const refY = m_refSamplesY.data();
+  Pel* const refCb = m_refSamplesCb.data();
+  Pel* const refCr = m_refSamplesCr.data();
+
+  m_boundary1Pred.resize(m_bound1Size.width * m_bound1Size.height);
+  long* const output = m_boundary1Pred.data();
+
+  const long *matrix, *bias;
+  matrix = &w_boundary1[0][0];
+  bias = &b_boundary1[0];
+
+  long value;
+  for (int y = 0; y < m_bound1Size.height; y++)
+  {
+    for (int x = 0; x < m_bound1Size.width; x++)
+    {
+      value = bias[x];
+      value += (refY[y] * matrix[x * 3 + 0]);
+      value += (refCb[y] * matrix[x * 3 + 1]);
+      value += (refCr[y] * matrix[x * 3 + 2]);
+      output[y * m_bound1Size.width + x] = (RELU(value) + (1 << (SHIFT_BOUND1 - 1))) >> SHIFT_BOUND1;
+    }
+  }
+
+  matrix = &w_boundary2[0][0];
+  bias = &b_boundary2[0];
+
+  matrixPred(output, boundaryPred, matrix, bias, m_bound1Size, m_bound2Size, SHIFT_BOUND2);
+}
+
+void NNIntraChromaPrediction::applyLumaBranch(long* lumaPred)
+{
+  m_padCollocatedSamplesY.resize((m_blockSize.width + 4) * (m_blockSize.height + 4));
+  long* refY = m_collocatedSamplesY.data();
+  long* const refYpad = m_padCollocatedSamplesY.data();
+
+  padInput(refY, refYpad, m_blockSize, 2, 1);
+
+  const long* matrix, *bias;
+  matrix = &w_luma[0][0];
+  bias = &b_luma[0];
+
+  int fRows = 5;
+  int fCols = 5;
+  int numPatches = fRows * fCols;
+  int matrixStride = numPatches + 1;
+  int idx, pos, pos_aux, patchPos, px, py;
+  long value;
+
+  for (int y = 0; y < m_blockSize.height; y++)
+  {
+    for (int x = 0; x < m_blockSize.width; x++)
+    {
+      pos = (y * m_blockSize.width) + x;
+      pos_aux = pos + (4 * (pos / m_blockSize.height));
+
+      for (int c = 0; c < m_lumaSize.width; c++)
+      {
+        value = bias[c];
+        for (int rows = 0; rows < fRows; rows++)
+        {
+          for (int cols = 0; cols < fCols; cols++)
+          {
+            idx = (cols + ((m_blockSize.height + 4) * rows)) + pos_aux;
+            px = idx / (m_blockSize.width + 4);
+            py = idx % (m_blockSize.width + 4);
+            patchPos = fCols * rows + cols;
+            value += refYpad[(m_blockSize.width + 4) * px + py] * matrix[c * matrixStride + patchPos];
+          }
+        }
+        value += matrix[c * matrixStride + (matrixStride - 1)] * 1023;
+        lumaPred[pos * m_lumaSize.width + c] = (RELU(value) + (1 << (SHIFT_LUMA - 1))) >> SHIFT_LUMA;
+      }
+    }
+  }
+}
+
+void NNIntraChromaPrediction::applyAttentionBranch(long* attPred, long* boundaryPred, long* lumaPred)
+{
+  static_vector<long, NN_MAX_OUTPUT_SAMPLES * NN_MAX_BOUNDARY_SIZE> attbTransposed(m_bound2Size.width * m_bound2Size.height);
+
+  const long *matrix, *bias;
+
+  m_attbPred.resize(m_attbSize.width * m_attbSize.height);
+  long* const attbPred = m_attbPred.data();
+  matrix = &w_att_b[0][0];
+  bias = &b_att_b[0];
+  matrixPred(boundaryPred, attbPred, matrix, bias, m_bound1Size, m_attbSize, SHIFT_ATTB);
+
+  m_attxPred.resize(m_attxSize.width * m_attxSize.height);
+  long* const attxPred = m_attxPred.data();
+  matrix = &w_att_x[0][0];
+  bias = &b_att_x[0];
+  matrixPred(lumaPred, attxPred, matrix, bias, m_lumaSize, m_attxSize, SHIFT_ATTX);
+
+  m_attx1Pred.resize(m_attx1Size.width * m_attx1Size.height);
+  long* const attx1Pred = m_attx1Pred.data();
+  matrix = &w_att_x1[0][0];
+  bias = &b_att_x1[0];
+  matrixPred(lumaPred, attx1Pred, matrix, bias, m_lumaSize, m_attx1Size, SHIFT_ATTX1);
+
+  getAttMap(attbPred, attxPred);
+
+  long* const attMap = m_attMap.data();
+  long* const attbT = attbTransposed.data();
+  for (int y = 0; y < m_bound2Size.width; y++)
+  {
+    for (int x = 0; x < m_bound2Size.height; x++) { attbT[y * m_bound2Size.height + x] = boundaryPred[x * m_bound2Size.width + y]; }
+  }
+
+  int pos;
+  long long value;
+  for (int y = 0; y < m_attMapSize.height; y++)
+  {
+    for (int x = 0; x < m_bound2Size.width; x++)
+    {
+      value = 0;
+      pos = y * m_bound2Size.width + x;
+      for (int i = 0; i < m_attMapSize.width; i++) {
+        value += attMap[y * m_attMapSize.width + i] * attbT[x * m_bound2Size.height + i];
+      }
+      attPred[pos] = (long)((value >> SHIFT_ATT) * attx1Pred[pos]) >> SHIFT_MASK;
+    }
+  }
+}
+
+void NNIntraChromaPrediction::applyTrunkBranch(Pel* cbPred, Pel* crPred, long* attPred)
+{
+  m_padAttPred.resize((m_blockSize.width + 2) * (m_blockSize.height + 2) * m_bound2Size.width);
+  long* const attPad = m_padAttPred.data();
+
+  int padUnits = 1;
+  int padChannels = m_bound2Size.width;
+  padInput(attPred, attPad, m_blockSize, padUnits, padChannels);
+
+  const long *matrix, *bias;
+  matrix = &w_out[0][0];
+  bias = &b_out[0];
+
+  int fRows = 3;
+  int fCols = 3;
+  int numPatches = fRows * fCols;
+  int matrixStride = (numPatches * padChannels) + 1;
+  int idx, pos, pos_aux, patchPos, chPos, p;
+  long value_cb, value_cr;
+
+  for (int y = 0; y < m_blockSize.height; y++)
+  {
+    for (int x = 0; x < m_blockSize.width; x++)
+    {
+      value_cb = bias[0];
+      value_cr = bias[1];
+      pos = (y * m_blockSize.width) + x;
+      pos_aux = pos + (2 * (pos / m_blockSize.height));
+      for (int ch = 0; ch < padChannels; ch++)
+      {
+        for (int rows = 0; rows < fRows; rows++)
+        {
+          for (int cols = 0; cols < fCols; cols++)
+          {
+            p = (fCols * rows) + cols;
+            idx = (cols + ((m_blockSize.height + 2) * rows)) + pos_aux;
+            chPos = idx * padChannels + ch;
+            patchPos = numPatches * ch + p;
+            value_cb += attPad[chPos] * matrix[patchPos];
+            value_cr += attPad[chPos] * matrix[patchPos + matrixStride];
+          }
+        }
+      }
+      value_cb += (matrix[matrixStride - 1]) << SHIFT_OUT;
+      value_cr += (matrix[(matrixStride << 1) - 1]) << SHIFT_OUT;
+      cbPred[pos] = (Pel)(value_cb >> SHIFT_OUT1);
+      crPred[pos] = (Pel)(value_cr >> SHIFT_OUT1);
+    }
+  }
+}
+
+void NNIntraChromaPrediction::predBlock(Pel* predCb, Pel* predCr)
+{
+  static_vector<long, NN_MAX_BOUNDARY_SIZE * NN_MAX_CHANNEL_SIZE> boundaryPred(m_bound2Size.height * m_bound2Size.width);
+  static_vector<long, NN_MAX_OUTPUT_SAMPLES * NN_MAX_CHANNEL_SIZE> lumaPred(m_lumaSize.height * m_lumaSize.width);
+  static_vector<long, NN_MAX_OUTPUT_SAMPLES * NN_MAX_CHANNEL_SIZE> attPred(m_attMapSize.height * m_bound2Size.width);
+
+  applyBoundaryBranch(boundaryPred.data());
+  applyLumaBranch(lumaPred.data());
+  applyAttentionBranch(attPred.data(), boundaryPred.data(), lumaPred.data());
+  applyTrunkBranch(predCb, predCr, attPred.data());
+}
+
+void NNIntraChromaPrediction::initPredBlockParams(const Size& block)
+{
+  m_blockSize = block;
+  int boundarySize = (2 * block.width) + (2 * block.height) + 1;
+  int blockSize = block.width * block.height;
+
+  m_bound1Size = Size(32, boundarySize);
+  m_bound2Size = Size(32, boundarySize);
+  m_lumaSize = Size(64, blockSize);
+  m_attbSize = Size(16, boundarySize);
+  m_attxSize = Size(16, blockSize);
+  m_attx1Size = Size(32, blockSize);
+  m_attMapSize = Size(boundarySize, blockSize);
+}
diff --git a/source/Lib/CommonLib/NNIntraChromaPrediction.h b/source/Lib/CommonLib/NNIntraChromaPrediction.h
new file mode 100644
index 0000000..9b3c434
--- /dev/null
+++ b/source/Lib/CommonLib/NNIntraChromaPrediction.h
@@ -0,0 +1,352 @@
+/*
+* Copyright 2021 BBC Research & Development
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*     http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*
+* ==============================================================================
+*/
+
+/** \file     NNIntraChromaPrediction.h
+\brief    NN-based intra chroma prediction class (header)
+*/
+
+#ifndef __NNINTRACHROMAPREDICTION__
+#define __NNINTRACHROMAPREDICTION__
+
+#include "Unit.h"
+
+static const int NN_MAX_BOUNDARY_SIZE = 65;
+static const int NN_MAX_OUTPUT_SAMPLES = 400;
+static const int NN_MAX_CHANNEL_SIZE = 96;
+
+static const int EXP_TABLE_SIZE = 1282;
+static const int EXP_BIT_TABLE = 8;
+static const int EXP_BIT_STEP = 1;
+static const int EXP_BIT_PRECISION = 15;
+static const int SUM_BIT_STEP = 8;
+static const int SUM_BIT_PRECISION = 15;
+
+static const int SHIFT_BOUND1 = 6;
+static const int SHIFT_BOUND2 = 10;
+static const int SHIFT_LUMA = 9;
+static const int SHIFT_ATTB = 10;
+static const int SHIFT_ATTX = 14;
+static const int SHIFT_ATTX1 = 11;
+static const int SHIFT_PREATT = 22;
+static const int SHIFT_SOFTMAX = 14;
+static const int SHIFT_ATT = 14;
+static const int SHIFT_MASK = 14;
+static const int SHIFT_OUT = 16;
+static const int SHIFT_OUT1 = 21;
+
+
+class NNIntraChromaPrediction
+{
+public:
+  NNIntraChromaPrediction();
+
+  void prepareInputForPred(Pel* pSrcCb, Pel* pSrcCr, PelBuf pColY, const Area& block, uint32_t* stride, const int* availableRefs, const int bitDepth);
+  void matrixPred(long* input, long* output, const long*& matrix, const long*& bias, Size inputSize, Size outputSize, int shift);
+  void padInput(long* const input, long* const output, Size inputSize, int units, int channels);
+  void getAttMap(long* const attbPred, long* const attxPred);
+  void applyBoundaryBranch(long* boundaryPred);
+  void applyLumaBranch(long* lumaPred);
+  void applyAttentionBranch(long* attPred, long* boundaryPred, long* lumaPred);
+  void applyTrunkBranch(Pel* cbPred, Pel* crPred, long* attPred);
+  void predBlock(Pel* predCb, Pel* predCr);
+
+  long w_luma[64][26] =
+  {
+    {-136, 12, 182, -129, -21, -218, -280, -2214, 172, -21, 495, -1313, 1645, -1775, 67, -125, -246, -2076, 10, 107, -40, 110, 192, 78, -157, 1664,},
+    {159, -88, -336, 325, 38, -90, -222, -542, 413, 78, -612, -864, -2870, 1083, -334, 285, 848, 1731, 2603, 77, -8, -115, -156, 283, 15, -336,},
+    {-7, -35, 4, -24, -19, 28, -71, -142, -94, -22, 115, -152, -249, -328, 34, -20, -99, 14, -36, -15, -15, 123, 58, 20, -42, 1144,},
+    {-1, -66, -191, -33, -2, 6, 102, 19, 4, -59, -99, -36, -530, -93, -190, -10, 130, 153, 62, -2, 38, 28, -142, 67, 5, 1023,},
+    {17, -3, -40, 21, 14, -2, -4, -87, 102, -35, -41, 122, -132, 53, -1, -42, -50, 30, 53, -11, -45, -64, 41, 9, 39, -231,},
+    {-25, -58, -127, -68, -108, 40, 100, 355, -25, -95, -126, 379, 936, 120, -172, -23, 169, 391, 78, -167, -56, -74, -101, -155, -2, 1479,},
+    {-4, -56, -189, 43, 14, -116, 10, 451, 3, -67, -296, 285, -974, 262, -277, 9, -59, 173, 27, 73, 28, -81, -161, -13, 102, 899,},
+    {-25, 38, 99, 20, -31, 103, -18, -170, -120, 69, -108, -83, 1043, 25, -96, 42, -101, -277, -176, 29, -45, 35, -39, -37, 41, 942,},
+    {30, -21, -100, 75, 46, -32, -234, -326, -83, 0, 19, -503, 456, 9, 98, 38, 3, -30, 309, 124, -16, 50, -5, 203, -24, 848,},
+    {-101, 57, 279, 7, 90, -151, 120, 18, 74, 13, 10, 549, -4141, 296, 142, -182, 50, 18, -74, -70, 7, 40, 39, -78, 68, 3175,},
+    {55, -120, -72, -48, 4, 0, 35, -151, 99, 17, -94, -173, 489, -81, -36, -7, 264, 91, 302, 8, -37, 2, -75, 86, 7, 951,},
+    {-6, 101, 86, -42, 60, 45, 285, 461, 178, -1, 60, 356, -154, 202, 69, -115, 143, 118, 55, -44, 3, -22, -167, -64, 15, 591,},
+    {55, 66, -37, 117, 78, 34, -117, -8, 13, -3, -122, -347, 806, 107, 12, -116, -57, -159, 122, 75, 27, -43, -130, 52, 9, 1935,},
+    {-107, -15, -21, 134, -112, 108, 0, -33, -95, 31, -96, -1025, 4779, -611, 128, 75, -80, -400, 46, 83, -45, 128, -30, 114, -113, -1630,},
+    {-22, -70, -17, -43, -36, -43, -59, -8, 83, 22, -120, 273, 1043, 110, -26, 49, -46, 70, 101, -36, 50, -36, -62, 1, -27, -72,},
+    {40, 62, -131, -26, 37, 43, 64, 137, 181, 10, -183, -559, 394, -290, -115, 81, 21, -78, 22, 98, 49, -49, -106, 60, 43, 1340,},
+    {3, -10, -55, 74, -41, -75, 95, -411, 204, 52, -141, -240, -1952, -93, -108, 82, 271, -305, -100, 49, 24, -75, -86, 97, -9, 1207,},
+    {-59, -16, 76, -189, 2, -40, 16, 115, 99, -101, 109, 741, -5010, 509, 60, -137, 160, 405, -141, -135, 21, -97, 159, -269, 37, 2840,},
+    {-2, 147, 111, 130, -70, 98, -242, -246, -208, -3, 195, -82, 2654, -21, 108, 20, -53, -159, -89, -32, -46, 39, 111, 3, -64, -28,},
+    {-62, -10, -346, 59, -71, -62, -224, -3564, -413, -24, 27, 616, 3691, 478, 54, -182, -456, 849, -142, -80, -21, 125, -144, -32, 101, -7,},
+    {-135, -127, -267, -105, -46, 53, -314, 468, -314, 98, -207, -610, 3756, -101, -67, -67, -353, 123, -200, 15, -48, 114, -85, 51, 8, -340,},
+    {-99, -222, -282, -236, -7, -76, -465, -471, -313, -111, 187, 224, 2560, -36, 165, -22, -277, 131, -464, -137, -35, 129, 134, -19, 39, 238,},
+    {80, 19, 338, 14, 70, 9, -190, -174, -72, -28, 393, -435, -3001, -609, 264, -32, -240, -515, -512, 20, 3, 88, 482, 18, 52, 4208,},
+    {-6, -11, -47, 26, -26, 56, -156, -149, 21, 96, 8, -31, -24, -21, -71, -10, 7, -140, -17, 78, -23, -37, -17, 41, -7, -122,},
+    {-61, -48, 52, -49, 10, 56, 25, -157, -21, -2, 180, 250, 914, 96, 113, 42, 40, -31, 42, 11, -8, -36, 22, -28, -69, 231,},
+    {-44, 79, 3, 16, 26, 82, -3, 298, 109, -29, -179, -118, 108, -7, -110, 73, 66, 70, 47, 66, 9, -32, -123, -66, -13, 1638,},
+    {28, -6, 153, -136, -21, -67, -321, -150, -439, 44, 47, -217, -5, -183, 18, -55, -164, 103, -102, -33, -76, -38, 24, -65, -13, 1007,},
+    {-2, -43, 154, 94, 123, -73, -348, -184, -373, 50, -140, -289, 4062, -71, 20, -73, -374, -57, -23, -35, -63, -62, -193, 85, 9, 2584,},
+    {-6, -49, -269, -129, -50, 135, -300, -191, -286, -42, -45, -142, 2965, 335, -113, 10, -208, 405, 271, 68, -39, 33, -6, 146, 40, 802,},
+    {-52, -93, -71, -14, -39, 13, -108, 390, -74, -42, -109, 234, 2622, 280, -70, 13, -32, 169, -29, -40, -63, -27, -75, 35, 0, -656,},
+    {-14, 11, -188, -31, 69, 27, -123, 431, -172, 18, -110, 425, 2369, 397, -138, 26, -111, 287, -45, -17, -19, 13, -179, 37, -4, -881,},
+    {-21, 16, -47, 8, 18, -138, -427, -60, -136, 1, 72, 6, 166, -104, -75, 44, -229, -122, -165, 21, 28, 43, -111, 24, 41, 852,},
+    {-22, 110, -132, 56, 66, 5, 49, -38, 90, -13, 43, 50, -1465, 16, -37, -141, -96, -241, -59, 21, 103, 5, -148, 58, 2, 1496,},
+    {-95, 76, -299, -25, 68, 88, -105, -347, -37, 114, 10, -106, 292, 639, -174, 32, 9, -289, -222, 68, -45, 65, -153, -74, 76, -211,},
+    {-190, -388, -14, -141, 54, -385, -606, -1205, -631, -266, 134, -721, 441, -758, 24, -149, -930, -1053, -1221, -120, 106, -46, 214, -196, 165, 990,},
+    {-6, -94, 101, -146, -120, -93, 51, -121, -51, 10, 212, -66, -234, -72, -17, 38, -116, -295, -256, -17, -74, 17, 68, -96, 17, 1626,},
+    {48, -176, 328, -112, 25, -14, -46, -303, 109, -105, 121, 388, -10528, 285, 70, -143, 218, 48, -124, -57, -29, -118, 327, -156, 5, 3013,},
+    {-49, -97, 176, -173, 101, -212, -674, -1416, -1094, -253, 556, 361, 1677, 545, 359, -179, -762, -833, -1104, -157, -58, -23, 139, -65, 28, 1503,},
+    {-87, -14, -183, 66, -24, 111, -142, 317, -167, 75, -153, -224, 5212, -56, -160, 67, -93, -23, 67, 42, -72, 24, -69, 138, -27, -1135,},
+    {-5, -108, 203, -142, 62, -53, -2, 399, -134, -117, 144, 123, -3588, 453, 109, -118, -53, 282, -37, -80, 16, -133, 197, -116, 79, 2100,},
+    {-163, -225, 627, -149, -88, -96, -654, -640, -1010, -388, 485, -380, 2627, -156, 462, -29, -982, -437, -562, -213, -270, -199, 789, -120, -271, 121,},
+    {23, 188, -211, 150, -14, -29, -39, -722, 286, 93, -165, -563, -2564, -264, -275, 60, 352, -539, 32, 89, 138, 13, -333, 114, 47, 1852,},
+    {-51, 313, 84, 593, -55, -209, -403, -2465, -590, -372, 547, -268, 2464, -7, 426, -53, -890, -3039, -1014, 47, 64, 361, 720, 343, -173, -1,},
+    {13, 20, 37, 161, 9, -38, -183, -287, -113, 39, -27, -520, 1073, -204, 28, 22, 0, -139, -159, 42, 0, 6, 5, 33, -16, 803,},
+    {-11, -18, -324, 118, -71, -44, -662, -217, -223, 5, -431, -233, 5447, 297, -215, 140, -126, 150, 51, 71, -78, -11, -211, 212, -50, 249,},
+    {13, 37, 7, 29, -41, 6, 24, 6, -124, -28, 130, 101, 1032, -182, 46, -13, -144, -219, -312, -64, 42, 92, -126, -102, -23, 445,},
+    {-427, -1088, -352, 237, 330, -803, -2225, 31, 95, -145, -1221, -3999, 724, 1566, 695, -327, -1945, -261, -315, -252, -191, -1033, -267, 69, 219, 360,},
+    {-210, -460, -713, -1076, -163, -158, -291, 67, -669, -132, 307, 666, 1283, 202, 190, -98, -10, 166, -389, -135, -92, -171, 183, -53, -38, 148,},
+    {-29, -44, 30, -82, -17, -66, -72, -80, -137, 73, -106, -325, 499, -275, 130, -34, -179, -221, -18, -28, -22, -6, 43, 22, 31, 1593,},
+    {-117, 13, -155, 161, -28, 191, -256, 212, -123, 97, -123, -282, 4617, -86, -165, 185, -36, -207, 29, 72, -68, 55, -160, 200, -73, -815,},
+    {50, -3, 175, -178, 62, 121, 379, 459, 179, -17, 268, 112, -1798, -108, -83, 88, 102, -166, -81, -32, 78, 58, 44, -78, 52, 1980,},
+    {89, -68, 48, 21, 12, 61, -382, -188, -96, 82, -384, -903, 2621, -125, -37, 108, 88, 78, 450, 205, -35, 0, -6, 173, 2, 409,},
+    {133, 134, -59, 25, 39, 213, 239, 385, 115, 53, -106, -30, -626, -359, -166, 44, 256, -65, 55, 26, 50, 30, -386, 121, 4, 1389,},
+    {80, 40, -173, -6, 30, 202, -71, 388, -288, 46, -16, 545, 811, 371, -228, -83, -272, 137, -255, -16, 95, 150, 16, -6, 22, -115,},
+    {22, -46, 65, 16, 37, -83, 14, 113, -18, -31, -212, 145, 1621, 446, -157, 9, -66, 531, 109, -31, -101, -18, -197, -24, 15, -24,},
+    {-106, -218, -273, -70, -44, -299, -330, -99, 70, -13, -179, 334, 697, 258, 33, 39, -29, 147, 105, 150, 7, 40, 25, 117, 70, 308,},
+    {-424, -415, -826, 62, -324, 211, -68, -1158, -75, 39, 487, 537, 1848, 229, 505, 219, 175, -1491, -11, -65, -503, -399, -508, -1, -280, -13,},
+    {-48, 30, 182, -43, -6, 96, -185, -155, 68, 119, -11, -213, 764, -116, 179, 18, -42, -234, -28, -41, 6, 12, 9, 79, -14, 242,},
+    {54, 113, 77, 55, -9, 19, -15, -88, -130, -21, 139, 13, 1277, -166, 65, -76, -11, -181, -303, -118, -13, -33, -45, -93, -25, 847,},
+    {8, -16, 80, 68, -26, -97, -335, -513, -290, -57, -49, -695, 4123, -66, 276, 10, -278, 130, 21, 103, -125, 73, 382, 185, 1, 708,},
+    {-39, 8, -40, 78, 3, 36, 77, 168, -22, 14, 60, 79, 1842, -173, -79, -75, -108, -25, 8, -55, -90, 44, -172, -42, -10, 1036,},
+    {34, -132, 199, -200, 49, -127, -137, 222, -39, -69, 186, -272, -3468, -1, 55, -243, -271, -98, 163, -51, 32, -135, 194, -67, -29, 2598,},
+    {7, -61, -90, -118, 49, -5, 224, 217, 13, 46, -231, 361, -1648, 97, -23, -118, -134, 430, -40, -24, 61, -10, -132, -48, 78, 1243,},
+    {18, -79, 13, -112, -25, 73, -263, -138, -213, -33, 38, -259, 1199, 142, -36, 53, -154, 108, 240, -6, -89, 61, 69, 4, -22, 1302,},
+  };
+
+  long b_luma[64] =
+  { 28255, 19561, 58500, 47403, -375, 79458, 58552, 65477, 56283, 124997, 15785, -3115, 79081, -42745, 625, 71120, 51617, 75213, 41849, 11676, -24735, 33586, 136551, -1507, 28014, 66290, 54813, 117722, 22521, -27465, -29432, 57425, 62339, -5969, 12714, 61122, 73608, 59178, -2547, 52346, 5312, 25719, -10686, 53417, 18366, 44203, -1466, 23026, 83771, -11574, 92353, 41005, 60571, 24179, -12397, 31542, -9760, 52313, 60538, 46759, 71109, 55569, 64205, 67136, };
+
+  long w_boundary1[32][3] =
+  {
+    {-523, -592, -42,},
+    {-284, 480, 452,},
+    {881, -853, -469,},
+    {-504, -501, 280,},
+    {381, 338, 451,},
+    {136, -402, 397,},
+    {515, 361, -503,},
+    {770, -24, 865,},
+    {-681, -133, 18,},
+    {-235, -349, -658,},
+    {874, -355, 622,},
+    {-110, -49, -275,},
+    {402, -56, 153,},
+    {510, 580, 481,},
+    {820, -293, 471,},
+    {174, 294, -423,},
+    {-1001, -108, 702,},
+    {-607, 440, 435,},
+    {899, 375, -384,},
+    {360, 815, -328,},
+    {-149, -248, 474,},
+    {-829, -638, 242,},
+    {-535, -297, -515,},
+    {783, -417, 775,},
+    {-714, -213, 436,},
+    {415, 320, -221,},
+    {222, 491, 230,},
+    {742, 729, -513,},
+    {-161, 365, 737,},
+    {504, 677, -312,},
+    {709, 621, 34,},
+    {887, -94, -293,},
+  };
+
+  long b_boundary1[32] =
+  { 0, -31057, -106988, 0, -94224, 207582, -161542, -29172, 0, 0, -70704, 0, -333093, 125688, -260339, 97421, 538536, 257840, 15434, 28948, 133701, 0, 0, 29181, 46903, -719, 53259, 48003, -4838, -101957, -335183, 48479, };
+
+  long w_boundary2[32][32] =
+  {
+    {286, 310, 564, 523, -372, 187, -730, -64, -164, -322, 444, 113, 828, 540, 608, -559, 74, -121, -357, -403, 303, 147, -302, -891, -680, 35, 227, 293, 566, 75, 192, -421,},
+    {-189, -511, -102, 381, 463, 455, -95, -396, -117, -445, -581, 7, -1093, -316, -7, 441, 303, -106, 669, 362, -134, 121, 219, 491, 332, 720, 318, -12, -214, 34, 16, -446,},
+    {-194, -82, -490, -446, -189, 343, -476, 243, -474, -288, 256, -37, -488, -20, 404, 68, -351, 131, 24, 581, -509, 298, -245, -206, -528, 48, 252, -337, 720, 348, 551, -590,},
+    {394, -519, -613, -307, -245, 607, 622, -415, -295, 65, 264, -297, -260, -424, -544, -181, 291, -532, -604, 559, -157, 539, -300, -115, -480, 202, 289, 428, 115, -444, -25, 81,},
+    {-6, 30, 28, -591, -601, -679, -413, 330, 353, 23, -186, -380, -316, 209, 300, 173, 716, 402, -336, 489, 264, 97, -57, -826, 322, -608, -101, 57, -246, -39, -719, -267,},
+    {-351, 452, -350, 211, 295, 590, -123, 285, -124, 582, -35, -124, 288, -324, -626, 603, -352, -349, 7, -89, 476, -275, -248, 58, 541, -414, -497, -249, 110, 458, -610, 184,},
+    {-539, 223, -18, -197, 616, 317, -608, 150, 185, -53, -440, 603, 246, -344, -477, 231, 488, -585, -223, -113, 342, -313, 291, 17, -274, 386, -569, -578, -296, 179, -394, -296,},
+    {483, -246, 474, -116, -364, -130, -76, -21, 286, -177, 101, 349, 575, 580, 315, 460, 291, 196, 571, -434, 633, 173, 154, -11, 328, 513, -132, -396, 509, 7, -483, -702,},
+    {43, 316, 199, 342, 191, -139, 722, -596, -439, 619, -383, 309, 86, -300, -168, -122, 197, 93, 332, 470, 555, -248, 523, 511, -101, 25, -51, 372, 75, -137, -288, 579,},
+    {-136, -273, -252, 269, 148, 436, 238, 501, -520, -505, -122, 389, -374, 596, -434, 109, -712, -505, -32, 525, 82, -586, 420, -53, -264, -362, 423, 527, -127, -76, 293, 214,},
+    {-446, 346, -568, 17, -527, 205, -161, -16, -407, 292, -271, 342, -577, 140, 234, -640, 455, -223, -144, -633, 215, 100, -565, -314, -595, -636, -12, -470, 221, 403, -172, -579,},
+    {-594, -562, 341, -539, -29, 160, -432, 509, 416, 314, -29, -77, -351, -564, -622, -219, 3, -433, 100, 439, 44, -33, -402, -591, -1, -268, -275, -574, -604, 532, 338, 541,},
+    {160, -568, 293, 318, 596, 406, 14, -192, -502, -210, -206, 226, -450, -229, -184, -165, 374, -203, -341, -463, 281, 149, 302, -556, 222, -382, -543, 184, 437, 376, 57, -460,},
+    {546, 295, 210, -243, 338, -373, 532, -46, -315, 48, -130, -192, -831, -427, -496, 411, 145, 168, 326, 591, 120, -483, 534, 197, -456, 295, -157, -219, 45, -131, 564, 472,},
+    {-30, -585, -871, 509, 704, -185, 208, 902, 198, 509, 1060, -146, -223, -146, 800, 418, -105, -307, 197, 113, -221, 592, 385, -100, -372, 166, 603, 719, -97, -140, -177, 734,},
+    {-115, 360, -21, -51, 253, -503, 17, 659, 239, -265, -23, 559, -68, -202, -210, -26, -70, 132, -506, 613, 32, 330, 17, 198, 297, -175, -463, -368, 86, 304, 359, 125,},
+    {-34, 146, 246, 618, -344, 448, 375, -113, -337, 212, 434, -161, 98, -261, -157, 413, -137, -513, -506, -538, -541, 565, -390, 119, -318, -138, -252, -597, -80, 615, 253, 307,},
+    {1, -438, -324, 245, 215, -504, -169, -119, 364, -339, -601, -376, -578, -92, 207, 249, -457, -435, 465, -223, -396, -328, -94, -407, 124, -40, -292, -330, -393, 351, -519, 220,},
+    {132, -259, -81, -277, -560, 223, -81, 760, -550, 284, 841, 166, 313, 510, 466, 329, -72, -1269, -230, 405, -42, 105, -460, 193, 199, -42, -50, 295, 14, 654, 453, 1744,},
+    {-489, 41, 536, 163, -470, -154, 189, -508, 393, -52, -128, -328, -432, -186, 428, 483, -554, -608, -282, 148, 378, -398, -239, 161, 0, -242, -3, -539, 181, 542, 379, 593,},
+    {-291, -481, -249, 583, -346, 383, -134, 423, -539, 208, 413, 85, -293, 263, 366, -192, -223, 109, 32, 540, 657, -593, -4, 690, 617, -537, 286, -323, -241, -499, -189, -95,},
+    {204, -434, 213, -419, 299, -206, -109, -615, 371, 514, -91, 367, -501, -466, -107, -435, 121, 621, -48, 500, -524, -351, 445, 33, 193, -286, -428, -92, -434, 338, 93, 595,},
+    {162, 23, 761, 426, -147, 377, 140, -200, -522, 188, -834, 146, -1078, 281, -869, 206, 780, 405, -661, 282, 3, 435, -430, 161, 397, -303, 363, -254, 155, 59, -715, 239,},
+    {103, 39, 245, 117, -64, -310, -80, 668, 238, -398, 700, -221, 703, -222, 606, -308, -804, -719, -438, 750, -443, 436, 3, 590, -519, -162, 448, 156, -478, 424, -114, 494,},
+    {126, 517, 465, -406, -159, -59, -855, 36, 324, -232, -321, -52, -60, -578, -227, -604, 806, 773, 27, 346, -536, 299, -292, -426, 429, -914, -18, 348, -393, -277, -424, 164,},
+    {-618, -625, -148, 152, -181, 466, 394, -4, -406, -596, -357, 587, 350, -421, 318, 390, 14, -225, -391, 31, 153, 262, -594, -326, 3, -291, 241, -79, 596, -123, 339, 8,},
+    {80, -13, 427, -513, 599, -76, 475, 345, -623, 70, -242, 122, -76, 85, -210, -33, 490, -389, -307, -533, 301, 282, 165, -624, -300, 275, 596, 381, 57, 366, -173, -105,},
+    {468, -139, 144, -36, -412, 136, -88, -14, 86, -232, -280, -183, -175, -115, 159, -143, -210, -382, 257, -78, -283, -257, -370, -362, 484, 2, 478, 139, -40, -315, -72, -130,},
+    {402, -345, -155, 144, -522, -61, -93, -364, -46, -115, -312, -392, -281, -161, 593, 34, 14, 514, -96, 278, 226, 409, 537, 417, -185, -477, -430, -345, 48, 446, -84, -537,},
+    {254, 537, 317, 467, 43, -416, 101, 124, -182, 352, -670, -518, 351, 589, 53, -328, 787, 688, -539, 345, 460, 92, 557, 6, 197, 538, 127, 502, -98, -33, -505, -853,},
+    {-547, -873, -438, 596, 678, -291, 445, 656, -8, -288, 531, -406, 321, -422, 289, 383, -511, -353, 580, 112, -28, 162, -441, 593, -1139, -157, -51, -256, -54, 376, 687, 482,},
+    {431, -201, 664, -392, -236, 306, 333, 650, 229, 145, -52, 545, -13, -182, -626, -229, 50, -250, 90, 195, 359, -369, 574, 417, 99, -225, -453, -270, 637, 26, -26, 298,},
+  };
+
+  long b_boundary2[32] =
+  { 1710624, 2196739, -5468392, 0, 16786672, 94899, 0, 517772, -3264, 2099658, -2977872, 0, 0, 308125, -9108883, -1380451, 0, 0, -17534560, -741011, 332071, 0, 17904396, -15996558, -197397, 0, -1758844, 0, 0, 8833988, -14177273, 2076604, };
+
+  long w_att_b[16][32] =
+  {
+    {99, -3, -212, -71, 240, 20, -49, 138, 147, -237, 94, -53, -134, -17, -67, -24, -23, -81, -378, 114, -49, -106, 168, -346, -90, -147, -100, -19, -64, 185, -299, -71,},
+    {197, 102, 61, -176, -177, 190, 80, 45, -162, 34, -42, -139, -171, -193, 5, 161, -178, -54, 84, -175, 50, -146, 58, 43, -122, 63, 70, -23, -23, -32, -273, -12,},
+    {8, -11, -21, -104, -95, -138, 178, 198, -58, -78, 99, -94, -149, -112, 121, 121, 165, 93, -207, 128, 82, -161, 24, 100, 73, 30, 17, 0, -94, -72, 52, 58,},
+    {76, 109, 296, 158, -557, 8, 22, -47, 15, 104, -48, 179, 179, 170, 70, -190, -107, -140, 283, -159, 93, -60, -138, -37, -925, -56, -199, -7, 109, -134, -28, 230,},
+    {-5, -88, -202, -18, -32, -165, 10, -87, 75, -46, 27, 47, -88, 44, -170, -55, 104, -112, 166, -132, 30, -132, -89, -207, 17, -92, 63, 122, -107, -86, 124, 138,},
+    {-151, -13, 263, 101, -972, 86, -34, -11, -116, 280, 5, 152, -39, 152, 173, -232, -113, -160, 324, -171, -47, 172, -841, 449, 108, -1, -406, -60, -14, -450, 479, 152,},
+    {-109, -44, -87, -20, 49, -67, -32, -79, -125, 149, -131, -134, -101, 54, 180, -60, 33, -2, 2, 85, -53, 65, -51, 113, 124, 109, -91, -144, 10, 84, 162, -126,},
+    {-100, -50, -8, -156, -183, 104, 109, 135, -73, 48, -87, -89, 143, 56, -275, 73, -140, -109, -248, -175, 61, 24, 54, -310, 111, -128, 14, -69, -119, 165, -264, -244,},
+    {180, 207, 130, -157, -272, 26, 23, -77, -132, 69, -13, 128, 46, -36, 6, 142, 115, -118, -186, 55, 24, -82, -66, -15, -675, 110, -167, -71, 70, -10, -224, 118,},
+    {-32, 180, 137, -158, -272, 114, -176, 140, 83, 85, 140, 78, -148, 81, -5, -12, 21, -58, -139, -155, 76, 33, -287, -226, -725, 43, -34, 77, -20, -253, 119, 54,},
+    {62, -70, -103, -22, 32, 102, -168, 216, -26, -51, -57, 116, 34, 121, -364, 69, 25, 52, -64, -1, -140, -88, -73, -300, -163, -172, 48, 10, -58, -30, -344, -105,},
+    {-23, 198, -46, 25, -275, 34, -2, -190, 151, 75, 145, -102, 13, 56, -125, -236, 3, -132, -61, -8, -90, 158, -25, -81, -63, -136, 174, -93, 160, 122, 111, 39,},
+    {11, -83, 72, 155, -234, 16, -127, 96, -76, 314, 62, 81, 34, 40, 170, 91, 125, -90, 4, -110, 114, -77, -337, -122, -989, 49, -123, 86, -73, 32, 57, -36,},
+    {2, 70, 229, -100, -391, 143, -108, -76, -111, 93, -75, -118, 153, 165, 121, -200, 61, -145, 192, -93, 155, 117, -212, -28, -988, -103, -53, 88, 37, -223, 147, 78,},
+    {-56, -134, -173, -97, 107, -58, 29, 214, 85, -101, -79, -168, 169, -31, -70, -20, -39, -173, -349, 177, 42, 19, 29, -211, -111, 65, 81, 130, 22, -123, -126, -204,},
+    {-131, 24, 131, 75, -269, -76, 47, -90, -48, 250, 63, 37, 113, -14, 257, -21, 26, 111, 154, 16, 149, -21, -199, -110, -815, -162, -267, 44, -1, -221, -115, 213,},
+  };
+
+  long b_att_b[16] =
+  { 70002264, 2123214, 1022360, 46396924, 3403173, 12141821, -475011, 61284740, 33185254, 47350368, 65460360, 5216162, 38950400, 48718940, 55879868, 48314480, };
+
+
+  long w_att_x[16][64] =
+  {
+    {456, 496, 313, 245, -154, 192, -3, 292, 197, 470, 10, -39, -35, -902, 172, 172, 343, 618, -149, -12, -408, -178, 226, -92, 2, 220, 127, 163, -272, 25, -129, 399, 467, 66, 1134, -13, 1390, 392, -550, 634, -404, 729, -814, -59, -43, -120, 822, 406, 390, 17, 407, -230, 214, 84, -250, 124, -1266, 255, -61, -124, 258, 877, -5, 304,},
+    {-110, -46, 380, 252, -173, 228, -123, -54, 340, 239, 407, 27, 313, -118, -116, 7, -574, -437, 101, -244, -189, 136, 61, -162, 73, 272, 232, 153, 71, 8, 94, 129, 262, 24, -438, 154, -1407, 411, 277, -158, 249, -116, 176, 147, 206, 31, 131, 367, 194, -18, -29, 281, 245, -169, 179, 367, -311, 104, 150, -78, 81, -598, 146, 351,},
+    {-286, -481, 253, 258, 187, 340, 281, -161, 177, -207, 303, -100, 223, -285, 244, 154, -2, 70, -125, -173, -391, -48, 167, -12, 86, 25, -61, 138, 260, 80, 204, 187, -9, -443, -458, 339, -1014, 98, -34, -78, 157, -355, -813, 163, -20, 94, 113, 158, -185, -55, 173, 127, 41, 127, 261, 325, -439, -35, -176, 383, -86, -151, -94, -132,},
+    {399, -996, 398, 115, 189, 53, 62, 467, 252, -339, 411, -46, 306, 573, 390, -13, 426, -404, 224, -65, 569, 232, -24, 170, 232, 150, -37, 747, 437, 520, 615, 32, -393, -34, -190, 53, -1024, 9, 798, -666, 1258, 309, 638, 347, 706, 69, -1219, -403, 255, 573, -167, 675, 352, 264, 612, 70, 1341, -13, 126, 478, 231, -562, -176, 324,},
+    {-328, 385, 289, 212, -276, 489, 57, 165, 569, 169, 467, 588, 471, 575, 183, 504, -616, 85, 673, 482, 660, 420, 384, 9, 590, 356, -243, 162, 698, 450, 599, 250, -95, -122, -275, 481, -362, 271, 641, -28, 404, -453, 102, 534, 262, 373, 873, 84, 448, 257, 416, 389, 103, 522, 692, 582, 444, 270, 325, 687, 454, -438, 328, 257,},
+    {-139, -91, -22, -297, 181, -212, -463, -148, -101, -437, 300, 10, -113, 863, 295, -212, 1056, -786, 245, 298, 439, 117, -120, -67, 291, -30, -438, 184, -17, 208, 415, -201, -630, -80, 25, -136, -200, -680, 511, -518, 353, 828, -410, 97, 399, -38, -520, -415, -372, 321, -170, -39, 43, -51, 372, -132, 712, 106, 235, -163, 156, -847, -426, -232,},
+    {-154, 154, 39, 56, -193, -56, -185, -282, -277, -303, 101, -264, 38, 171, -152, -183, 47, 38, 204, -191, -38, -171, 193, -27, 99, -51, 111, 165, -155, -216, -91, -229, -224, -256, -179, -132, -182, 254, 198, 232, 137, 250, -12, -31, -84, 38, -257, 115, 243, 176, -198, -56, 167, -267, 4, -201, 250, -80, -213, -18, 184, -55, 233, -52,},
+    {1183, 711, 568, 732, -228, 514, 797, 450, 347, 887, 196, 511, 416, -756, 256, 539, 829, 1187, 118, 310, -166, 476, 647, 158, 217, 364, 986, 238, -110, -82, -68, 546, 1034, 205, -477, 434, 2571, 667, -364, 1161, -601, 1122, -377, 491, -208, 474, 918, 815, 346, -335, 627, 43, 147, 401, -10, 238, -863, 352, 270, -9, 597, 1589, 514, 472,},
+    {-251, -298, 283, 159, 108, -25, 291, 300, 455, 259, 8, 274, 289, -280, 365, 509, -175, -248, 158, -363, 4, 50, 64, -101, 163, 305, 58, 522, 336, 411, -105, 112, 309, 343, -859, 469, -2707, 368, -21, -462, 334, -379, 142, 460, 53, -61, 8, 344, 200, 417, 351, 393, 278, 305, 530, 356, -172, 333, 431, 251, 307, -189, -11, 307,},
+    {234, -557, 92, 100, -103, 361, -221, 162, 411, -95, 303, 439, 169, 978, 495, 388, -376, -622, 435, -277, 822, 211, 65, 140, 355, 289, 115, 668, 628, 392, 283, -121, -8, 263, -151, 390, -1289, -73, 342, -670, 338, -289, 384, 68, 200, 316, -234, -420, 248, 306, 106, 160, 244, 133, 358, -65, 1130, 207, 340, 660, 377, -290, -201, 353,},
+    {1035, 756, 459, 466, 247, 444, 614, 541, 34, 910, -9, 237, 616, -339, -11, 591, 1607, 1396, -12, 59, -350, 62, 655, 117, 418, 449, 689, 227, -172, -253, 319, 598, 621, 143, -234, 463, 3048, 581, -33, 1419, -208, 1181, 88, 212, -281, 141, 734, 537, 598, -18, 425, 240, 77, 58, -208, 323, -1044, 351, 412, 73, 134, 1576, 651, 230,},
+    {202, 467, 229, 338, 99, 385, 77, 144, 237, 79, 362, 70, -158, 13, -62, 38, -436, 322, 22, 39, -89, 132, -145, -266, 375, -34, 126, -55, 306, 331, 361, 28, 10, -161, -592, 233, -515, -70, 256, -196, 315, -425, -357, -43, 186, 120, 408, 276, 100, 102, 407, -101, 49, 142, -142, -1, -357, 149, 240, -2, 262, -92, -20, 332,},
+    {174, -960, -28, -244, 151, -117, 71, 281, 28, -30, -47, 185, 134, 98, 458, 156, 254, -365, 515, -490, 113, 69, 104, 182, 393, 219, 9, 631, 378, 237, -17, -108, 205, -94, -179, 246, -1427, -31, 552, -128, 777, 15, -3, 35, 448, -113, -1086, -266, 328, 136, 116, 369, -58, -192, 164, 343, 657, 380, -107, 395, 206, -245, 96, 251,},
+    {384, -897, 202, -411, -149, 304, -66, 357, 103, -185, 539, 393, 230, 770, 322, 212, 482, -649, 389, -488, 382, -49, -140, 162, 184, 196, 111, 147, 162, 77, 465, 111, -176, -31, -207, 391, -489, 86, 528, -721, 868, 419, 491, 415, 659, -31, -834, -324, -147, 715, -119, 369, -161, 97, 326, 67, 1155, 340, 367, 470, -42, -122, -24, 267,},
+    {1000, 196, 53, 295, -19, 352, 515, 305, 169, 583, 13, 394, 181, -762, -67, 403, 765, 372, 114, -23, -152, -190, 101, 23, -152, -121, 618, 170, 154, -324, -309, 57, 680, -51, 1193, 413, 2286, 403, -518, 544, -280, 1059, -518, 377, -309, 227, 580, 638, 84, 11, 463, -262, 390, -61, -63, -44, -1293, -91, 280, -276, 299, 931, 217, -88,},
+    {371, -1308, -150, 73, 34, 402, 27, 187, 463, -74, 179, 310, 277, 758, 65, 51, -4, -337, 380, -568, 700, 241, -20, 162, 2, 501, 85, 573, 491, 345, 550, -121, -81, -95, 788, 210, -1467, -284, 696, -666, 1115, -18, 248, 323, 399, -63, -864, -80, 174, 772, 351, 429, 191, 178, 173, 68, 1376, -76, 133, 484, 481, -596, -39, 114,},
+  };
+
+  long b_att_x[16] =
+  { 391261, 195180, 106629, 194119, 675442, -333456, -26503, 1073654, 437424, 83406, 966431, 244964, 211628, 22426, 545351, 167748, };
+
+
+  long w_att_x1[32][64] =
+  {
+    {717, 210, -443, 1000, -635, 774, 825, -177, 877, -61, 487, -967, -142, -263, -676, 779, 588, 866, 51, 653, 639, -829, 404, 443, 564, -586, -504, -869, -897, 446, 750, 346, -749, 638, 903, -589, 446, 453, 464, 821, -425, 108, 2, 172, -382, 915, 212, -394, 448, 282, 756, 460, -480, -775, -811, -399, -28, 745, -176, -180, 945, 417, 173, -527,},
+    {603, -245, -767, -387, -959, 949, 355, -744, -806, 766, 34, 900, 737, -577, 948, -180, -487, -1083, 332, -1210, -1388, 707, 443, 690, -96, -855, 155, 423, 115, -930, -410, 83, -472, 909, -145, 9, -627, 819, -1149, -825, 1229, -343, -2099, 4, 246, 691, 1156, 1070, -47, -879, 734, -202, -368, -136, 637, 1033, -539, 22, -709, 620, 374, 32, -596, 1057,},
+    {651, 47, 608, 30, 266, 907, 683, 246, -576, 158, -371, 958, 71, -71, 450, -180, -400, -985, -249, -296, -670, 122, -36, -706, 443, -130, -487, 819, -718, -11, 953, 575, -143, 450, 1178, 899, -33, 214, 564, 399, 465, -897, -1320, 2, 179, 138, 452, 383, -232, -904, -119, 556, 577, 263, -775, 707, 35, -655, -222, 608, -845, -561, -554, -496,},
+    {993, 8, -130, 418, 18, -102, -778, -823, 802, 827, 667, 47, -659, 379, -270, 324, 617, 81, 960, 492, 727, -981, -892, -575, -233, -495, 418, 1011, 594, -824, -632, -979, -119, 726, 722, -991, -664, 1021, 281, -838, 462, 824, 938, 895, 281, 642, 937, 794, 310, -371, 537, -41, 971, 888, -694, 128, 384, -157, -286, 848, 730, -511, 600, 159,},
+    {-345, -339, -355, 174, 52, 691, -632, -943, 1020, 169, -555, -958, -986, 476, -847, -95, -459, -68, -109, -576, -614, -376, 760, 278, -101, 646, -406, -711, 562, 905, -143, 484, -324, -285, -748, -723, -996, -747, -132, 207, 262, -766, 577, -129, -375, 370, -362, 608, 92, 351, -876, -827, -268, -313, 233, -890, 569, 7, -613, -988, -32, -479, -734, -459,},
+    {75, 322, 1014, 846, 433, -698, 251, 793, -184, -738, -520, 667, 926, 1001, -707, 881, 656, 942, 230, 506, -310, 510, 670, -630, -719, -515, 251, -414, -697, -159, -866, 133, 959, -719, 1062, 262, 959, 21, -680, 467, 601, -422, -691, -291, -344, -1, -291, -557, -857, -202, -447, 344, 662, 121, -664, -150, -686, -441, 261, 172, -799, -362, -300, 304,},
+    {779, 622, 194, 471, -36, 866, 311, 69, 10, 571, 968, -159, -292, 997, 695, -432, 436, -48, -121, -410, -103, 743, 57, 676, -291, -946, -368, 252, 173, 275, 399, 941, -862, 149, -442, 1023, 321, 654, 956, -76, 418, 160, 954, -528, -624, 157, 191, 305, 588, -983, -831, -635, -416, -253, -159, 961, 633, -266, 69, 991, -340, -505, -887, 246,},
+    {-517, 101, -87, 454, -819, -239, 879, 660, 39, 447, -223, -361, 413, -340, 930, 953, 444, 39, 4, -301, -541, 222, -330, -639, -825, 134, 510, -224, 73, -825, -15, 860, -172, 52, -115, -685, 157, -157, -340, -101, 408, -873, -176, 753, 528, 809, 222, 318, 710, 132, -51, -720, 190, 503, -176, 899, 318, 221, 453, -568, 864, -1191, -302, 901,},
+    {-10, -185, 820, -447, -17, 89, 545, -749, 33, -54, -821, -755, 997, 373, -803, -608, 1001, 853, 165, 793, 1854, -639, 396, 183, -183, -642, 990, -79, -55, 1091, -800, -973, 834, -777, -735, -235, 967, -235, -306, -916, -617, -147, 1322, -35, -95, 164, -933, -485, -173, 701, 946, 450, 545, -552, 517, -312, 56, 461, -736, -818, -902, 756, -511, 534,},
+    {-653, -502, 552, 672, -530, 337, 182, 686, 710, 600, -961, -734, 43, 349, 154, 819, 243, 269, 806, -33, -500, -207, -1012, -1017, -273, -719, 182, -74, -451, -208, -883, -40, 925, -201, -1117, 366, 406, -264, -243, -263, -304, -167, 756, 611, -199, -1151, -409, 62, 2, 715, 652, 691, -806, 203, 202, 324, 388, 767, 454, -666, 567, 98, 663, 845,},
+    {-287, 728, 195, -598, -158, -13, -647, -688, -48, -1016, 758, -909, 196, 325, 15, 181, -86, -453, -505, 674, -826, -217, 967, -994, -934, -543, 769, 284, 887, 680, 883, 261, -191, -105, 756, -742, 924, -51, -13, -279, -80, -597, 1016, -625, -164, -1065, -488, -354, -575, 53, -3, -776, 719, -347, 362, 324, -792, 154, -34, 863, -644, 710, -909, 256,},
+    {-374, -619, -412, 927, -839, -216, -264, -51, 215, -694, 671, -268, 171, 136, -712, 314, 457, 421, -200, 946, -922, 395, 704, -593, -68, 373, 98, 383, -667, 508, 896, 1014, 252, 512, 462, -56, 482, 219, -428, 383, 394, 548, -669, 561, 63, 624, 971, -825, 380, 35, 719, -445, -239, -411, 978, 287, 611, 36, 692, 187, -600, 311, 713, 952,},
+    {742, -951, 61, -887, 638, -424, -132, -909, 188, -451, -613, -693, 157, -254, -490, -628, -242, -770, 423, -292, -823, -662, -999, 687, 498, -978, 937, -685, 140, 253, 728, 669, 993, 169, 623, 640, -886, -403, -246, 129, 992, 120, 929, 974, -787, 944, -646, -884, 301, 783, 908, 481, -689, 59, 204, 248, 527, -291, 962, -968, 99, 134, -983, 237,},
+    {1267, 1054, 366, 887, 882, -236, 511, 959, -650, -862, -744, 916, -789, -1072, -729, 399, 897, -37, -218, -538, -561, 1033, 971, -203, 986, -556, -258, -593, -192, -502, -528, 27, 134, 1147, 2579, -474, -721, 1025, -209, -743, -46, -840, -1504, 46, 687, 813, 958, 371, 1032, -358, -451, 908, -309, 51, 110, -219, -622, 519, 1081, 525, 316, 289, 910, -398,},
+    {-53, -154, -719, 975, -398, -835, 197, -762, 347, -235, -80, 141, -368, 67, 445, -77, 818, 948, 730, 138, 368, -417, 221, -530, 171, -321, 590, 663, 282, -1098, -231, -1071, -151, 1530, -304, 542, -987, -480, 642, -205, -102, -365, 251, -450, -788, 590, -65, -131, 555, 491, -969, -470, 297, 815, 887, 745, -9, -167, 904, -275, -783, 647, -849, 189,},
+    {1297, 77, 567, -683, -881, 36, -845, 635, 469, -167, 800, -630, 575, -894, -210, 473, -629, -457, 48, -597, -945, 383, 865, -891, 766, -681, 566, 65, -17, -353, -125, -71, -584, -861, 652, 168, -975, 1096, -27, -623, 867, 654, -1788, 607, -326, 950, 1104, 542, 1020, -1023, 567, -246, -429, -1091, -878, -472, -1065, 405, 275, 1123, 912, 737, -829, 532,},
+    {-320, 159, -617, -62, -613, 302, 604, 90, 225, 513, 942, 354, -868, 267, -594, 953, 841, 761, 165, -544, 696, 12, 246, -75, 698, 864, -634, -489, -198, 446, -969, 956, 467, 464, -377, 383, -587, -163, -162, -381, -99, 682, -811, 39, 516, 306, -339, -836, -832, -269, 431, -837, -141, 557, -806, 29, 323, 619, 809, -653, 116, 542, 736, -405,},
+    {1007, 253, -1021, -451, 810, 845, -118, -932, -374, 974, -307, -280, 493, -49, 122, 1005, 854, 551, -504, -343, -212, -459, -134, -325, -851, -601, 135, 118, 311, 1004, 30, -773, -516, -687, 73, 211, 738, -295, -192, -492, -1001, -438, 441, -409, 860, 980, -565, 788, -488, 287, -377, 563, 111, 696, 354, -743, 119, 741, -578, 531, 85, 438, 907, 336,},
+    {-110, 123, 768, -416, -23, -763, 26, -856, -530, -415, -599, -327, 616, -1063, 647, 321, 667, 730, -342, 55, -102, -126, 142, -675, -558, -219, -418, -137, 737, 755, -11, -301, -636, 916, 1487, 359, 1951, 358, -11, -194, -104, 1067, -307, 1106, -606, 611, -58, 166, 277, 564, 291, 694, 181, -406, 94, -403, -133, -329, -850, -81, 776, 52, 273, -469,},
+    {-379, 831, -537, -694, -5, -797, 194, 482, -779, 444, 860, -608, -748, -745, -291, -934, 839, -275, 754, -318, -917, -225, -504, -24, -606, 138, 316, 778, 50, -495, -265, 157, 850, -682, 747, -906, 636, -92, -791, -735, 780, 20, 672, 727, -801, -271, -184, 415, 537, -962, -328, -316, -185, 351, -931, 824, 498, 529, 119, -494, -786, 207, 830, -52,},
+    {891, 1045, -988, 544, -560, 922, -622, 843, -43, -939, -182, -932, 187, -926, -774, 425, 107, -616, 993, -359, -119, 730, 299, 226, -910, 791, -649, 448, -888, 472, 675, 563, -116, 1048, 2752, -394, -30, 781, -592, -455, 213, -83, -1240, -837, -974, 549, 760, 229, 201, -1004, 10, 220, 590, 204, -600, 1013, -381, 43, 65, 910, 269, -217, 654, -774,},
+    {-984, -350, 139, -778, 926, -391, -524, -922, -364, 513, -897, 132, -395, -59, 423, 957, 13, -35, -99, 892, -154, 1013, -261, -847, 852, -698, -227, 173, 82, 942, -544, 381, -255, 557, -861, 821, 49, -76, -990, -578, -32, 97, 582, 283, 1023, 315, -147, 604, 119, -662, 452, 185, -790, 141, -180, -928, 537, 282, -943, 674, -772, -759, 243, 273,},
+    {-87, 448, 889, 937, 595, -568, 181, -747, -342, 700, -994, 158, -353, 200, 973, -502, -371, -812, -972, -836, 262, 726, -142, 759, -572, -170, -486, -801, 2, -816, 898, 145, -603, 719, 839, 13, 830, 155, -873, 969, 417, 323, 858, 63, 518, -986, -418, -198, -925, 3, 128, -871, -213, -383, 776, -979, -798, -424, -511, 70, -314, -345, -835, -590,},
+    {110, -929, -417, -96, -160, -729, 195, 332, 672, -146, 687, 319, -78, -968, -284, 925, 497, 969, -865, 713, 85, -723, 136, -464, -895, -323, 408, -49, -815, -622, 836, -940, 892, -722, -57, -551, 408, -313, -407, -937, -441, -777, -1022, -858, 564, -28, 703, -857, -825, -240, -775, 537, -248, -542, 485, 298, 605, -294, -711, 179, -784, -369, -940, 198,},
+    {-319, -25, 47, -217, 437, -696, -210, 464, -432, 531, -208, 68, -882, -1585, 1924, 1057, 730, 898, -967, 408, 1448, 70, 123, 652, 107, 471, 224, 15, 124, -888, -995, -99, 623, 1586, -393, 610, 127, -464, 76, -750, -641, -39, 1288, -542, -185, 418, -325, -136, -754, 826, -731, 791, 46, 369, 722, -485, 662, -404, -315, 30, -33, 299, -677, 13,},
+    {551, -237, 478, 713, -665, 606, 164, -50, -566, -908, -390, -852, 41, 63, 108, -312, 831, -499, 739, -879, 203, 471, -46, -471, 72, -62, -120, -30, -809, 716, 45, 965, -627, 674, 468, -1005, 774, -799, -947, 423, 555, -824, 217, -20, 309, -220, 752, 755, -127, 716, 420, 514, -553, -946, -318, -117, 852, -703, -616, -661, -468, -359, 244, 14,},
+    {-681, -339, -438, 397, 602, 312, 454, 930, -202, 806, -638, -798, 654, -231, -12, -415, 557, -594, 781, -499, -565, 523, -348, -836, 621, 1063, 703, 692, 1069, 24, -387, 1053, -274, 703, -1008, -381, 140, -520, -780, -461, 225, -383, -744, -770, -125, 952, 103, 457, 498, 838, -33, -128, -168, 485, 543, 270, 452, 243, -431, -244, -374, -505, 59, -725,},
+    {-773, 481, 512, -423, 901, -918, -832, -346, 16, -361, 311, -482, -127, -410, -632, -238, -95, 711, 929, -319, -375, -464, 989, 342, 255, 691, -514, 180, -441, 713, 852, -146, 889, 581, 975, 838, -209, 478, -807, -2, 674, 61, -855, -540, 392, -957, -1016, 498, 635, -1001, -544, -908, -332, -232, 232, 74, -547, -82, -859, -974, -658, 4, -411, -492,},
+    {-141, 109, -242, 457, -773, 322, -320, 485, -44, -469, 1008, 675, -163, -467, -501, 258, 710, -680, -420, -428, -860, 976, -142, -240, 800, -765, -980, 1016, -502, -296, -159, -512, 805, 868, 145, 1008, -748, 921, -818, 12, 432, 778, -516, -43, 758, 85, -404, -381, -163, -252, 962, 335, -5, 896, 884, -43, 309, -571, -266, 204, 168, -699, 924, 1021,},
+    {-566, 335, -863, 933, -208, 339, -486, 939, -855, -262, -903, 875, 313, 468, -179, -758, -712, -247, -33, 630, -891, -455, -600, 1000, 852, -894, -915, -204, -253, -661, -586, 742, 884, 725, 168, 128, -854, -469, -148, 936, -474, -87, -677, -101, -418, 194, 533, -646, 971, 560, -269, -565, -779, -503, 139, -270, 135, -768, -357, -679, 376, 897, -617, 17,},
+    {905, -996, 565, 401, 981, -1003, -833, -12, -982, -280, 12, -327, 433, 386, 103, 753, 701, -838, 558, -315, -917, 503, -290, 793, 817, 725, -93, -215, -504, -89, 123, 804, 84, -197, 841, -855, -619, -442, 277, 893, 645, -1007, 438, -617, -857, -961, -333, 915, -915, -243, 450, 707, -685, -277, -2, -670, -17, 902, 408, -421, -937, 12, -853, -386,},
+    {890, -345, 404, -748, -683, 746, 714, 280, 659, 808, 325, -586, -699, -948, 821, -601, -894, -939, 382, -735, -1088, 28, 573, 112, 895, 310, 614, -524, 19, 128, -15, 877, 635, -877, 34, 983, -617, 811, -778, -661, 319, -194, -1686, 440, 327, 211, 939, 726, 728, 28, 467, 899, -732, -160, 220, -532, -276, 745, -152, 470, 682, -298, 635, -475,},
+  };
+
+  long b_att_x1[32] =
+  { -19801, 68385, 57413, 0, 0, 299117, 0, 381902, 351469, -108121, -13440, 0, 0, 314969, 74987, 458661, 0, 0, 96654, 8087, 293518, 0, 3106, 5542, 9574, 0, 221060, 0, 0, 1533, -29942, 365586, };
+
+
+  long w_out[2][289] =
+  {
+    {306, 330, 589, 341, 7321, 440, 501, 765, 455, 1171, -201, 757, -86, 576, -262, 330, -204, 193, 743, 2680, 911, 3446, 7105, 2654, 711, 3308, 661, 772, -1194, -192, -1236, -808, -982, 5671, -221, -3471, 71, 46, -2788, -638, 6821, -3905, -141, -1832, 2861, -1851, -1651, -3398, -6549, -7123, -6295, -2397, -4424, -5347, -463, 2865, 990, 3141, -1125, -157, -399, 2140, -579, -1587, -1096, -1210, -985, 6401, -787, -1285, -720, -938, -108, -498, -993, -545, 6072, -888, -819, -1846, -638, 645, 558, 202, 650, 4461, 596, 386, 380, 458, -1971, -1838, -1309, 1219, -1324, -3344, 1619, -6160, 1793, -503, -6, 1392, 152, -1165, -1095, 1023, -1703, 1350, -1810, 1404, 118, -991, -1481, 2659, -137, -2285, 1712, -1887, 1136, -1058, 1214, 11565, 1338, -396, 1443, -254, 586, 180, 96, 387, -754, 31, 137, 76, 67, 706, 3219, 471, 3640, 13369, 3136, 686, 3080, 189, -2521, 98, -2953, 2099, 385, -3663, 124, 1690, 400, -702, 2230, -1694, 4575, 2364, 1834, 218, 377, 1492, -222, 315, -140, 290, 214, 287, -38, 386, -110, -4187, 265, -1580, 993, 356, -1053, 787, -1033, -2094, 2102, -187, 823, -237, -5652, -560, 652, -818, 518, -1906, -130, -4909, 2254, -2945, -273, -401, 675, 977, -8, 1325, -1160, 3489, 945, -1408, -1346, 118, 942, 3389, -554, 2154, 683, -1627, 224, -1666, 2171, -333, 466, -371, 175, 75, -1968, 776, 293, 240, -163, -493, 1565, -1347, 73, -536, -2059, 100, 2680, -1332, 3848, 3919, 2485, 4171, 4197, 3632, 2457, 3494, 2487, 1975, 1302, 195, 574, -891, -2189, 2091, 4791, 1009, 151, 2879, -132, -3832, 2372, -913, -693, 585, 1827, 885, 3810, 1082, -758, 3218, 72, 3200, 1667, -722, -2562, -555, -1920, -4271, -2370, -2185, 4039, 799, 746, -1681, -3466, -995, -4198, -11105, -3571, -1225, -3568, -837, 9063,},
+    {-923, -3060, -1142, -2556, -109, -2495, -1050, -3149, -841, -3856, -5747, -2600, -5979, -10475, -4852, -2221, -5002, -1908, 3704, 2564, 2463, 3593, -924, 2749, 2627, 2312, 2220, -757, -2770, 1061, 774, 2113, 3978, 2531, 15, -1118, -685, 821, 1336, 412, -2166, 528, -1683, -4855, 2240, 4271, 3702, 8440, 4401, 6647, 7816, 5772, 5051, 6311, 1683, 1998, 23, 1156, 2230, -1772, 4329, -1145, 3720, 2828, 2443, 2257, 2167, 3053, 2124, 2317, 2081, 1940, 560, 1382, 1720, -534, 7467, 462, 848, 1752, 1252, -1329, -63, -655, -381, 5786, -134, -692, 108, -509, 1273, 1917, -2104, 1349, 2777, -3234, 1722, -1148, 505, -1312, -1076, 883, 926, -1022, -1668, -4587, -729, -1737, -918, 2565, -2439, -50, -1041, -3490, -2002, 4155, 2166, 3506, -347, 1866, -1492, -6303, -1740, 923, -1655, 886, -613, 144, -141, 205, 37, 272, 251, 524, 263, -505, 4493, -222, 5021, 19099, 4438, 250, 4876, -309, 1541, 678, -778, -94, 1121, -325, 123, 2099, 2619, -489, 304, 483, -642, -1885, -1011, -1715, 2817, 2267, 551, -208, 400, -28, -2476, -314, -18, -440, 110, 372, -2289, -907, -2262, -746, 432, 710, 1079, -188, -3125, -154, -1455, -12, 6431, 476, -927, 861, -683, -523, -211, 2186, 1502, -3119, 1514, -3801, 549, -911, 692, -2079, 1170, 1592, -3133, -2732, -409, 3168, 1140, -42, -1979, -2459, 3577, -419, 2520, -2718, 1409, -56, -2619, -1024, -2927, 318, 6587, -387, -2100, -295, -2526, -191, -4678, 190, 1422, -1253, -327, 680, -4273, 803, -1306, -1291, -731, -237, 3739, -339, -1119, -629, -678, -1024, -2163, 2971, 1375, 1254, -149, 399, 2811, -2033, 92, -110, -570, -2481, -559, 833, -2433, 753, -2480, -1495, 1088, 3842, -4126, -109, -1209, 166, -599, 352, 1833, -1553, -4086, 474, -819, -3608, -1894, 1039, -2235, 2195, 1183, 1089, 1562, 2687, 779, 932, 779, 920, 8654,},
+  };
+
+  long b_out[2] =
+  { 109698032, 134890382, };
+
+  long exp_table[1282] =
+  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 40, 40, 40, 41, 41, 41, 42, 42, 42, 43, 43, 43, 44, 44, 44, 45, 45, 45, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 50, 50, 50, 51, 51, 52, 52, 52, 53, 53, 54, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 69, 70, 70, 71, 71, 72, 72, 73, 73, 74, 75, 75, 76, 76, 77, 78, 78, 79, 79, 80, 81, 81, 82, 83, 83, 84, 85, 85, 86, 87, 87, 88, 89, 89, 90, 91, 92, 92, 93, 94, 94, 95, 96, 97, 97, 98, 99, 100, 101, 101, 102, 103, 104, 105, 105, 106, 107, 108, 109, 110, 111, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 173, 174, 176, 177, 178, 180, 181, 183, 184, 185, 187, 188, 190, 191, 193, 194, 196, 197, 199, 201, 202, 204, 205, 207, 209, 210, 212, 213, 215, 217, 219, 220, 222, 224, 226, 227, 229, 231, 233, 235, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 279, 281, 283, 285, 287, 290, 292, 294, 297, 299, 301, 304, 306, 308, 311, 313, 316, 318, 321, 323, 326, 328, 331, 334, 336, 339, 341, 344, 347, 350, 352, 355, 358, 361, 364, 366, 369, 372, 375, 378, 381, 384, 387, 390, 393, 396, 399, 402, 406, 409, 412, 415, 418, 422, 425, 428, 432, 435, 439, 442, 446, 449, 453, 456, 460, 463, 467, 471, 474, 478, 482, 486, 489, 493, 497, 501, 505, 509, 513, 517, 521, 525, 529, 533, 537, 542, 546, 550, 555, 559, 563, 568, 572, 577, 581, 586, 590, 595, 600, 604, 609, 614, 619, 624, 628, 633, 638, 643, 648, 654, 659, 664, 669, 674, 680, 685, 690, 696, 701, 707, 712, 718, 723, 729, 735, 741, 746, 752, 758, 764, 770, 776, 782, 788, 795, 801, 807, 813, 820, 826, 833, 839, 846, 853, 859, 866, 873, 880, 886, 893, 900, 908, 915, 922, 929, 936, 944, 951, 959, 966, 974, 981, 989, 997, 1005, 1012, 1020, 1028, 1036, 1045, 1053, 1061, 1069, 1078, 1086, 1095, 1103, 1112, 1121, 1130, 1138, 1147, 1156, 1165, 1175, 1184, 1193, 1202, 1212, 1221, 1231, 1241, 1250, 1260, 1270, 1280, 1290, 1300, 1310, 1321, 1331, 1341, 1352, 1363, 1373, 1384, 1395, 1406, 1417, 1428, 1439, 1451, 1462, 1473, 1485, 1497, 1508, 1520, 1532, 1544, 1556, 1568, 1581, 1593, 1606, 1618, 1631, 1644, 1657, 1670, 1683, 1696, 1709, 1723, 1736, 1750, 1763, 1777, 1791, 1805, 1819, 1834, 1848, 1863, 1877, 1892, 1907, 1922, 1937, 1952, 1967, 1983, 1998, 2014, 2030, 2046, 2062, 2078, 2094, 2111, 2127, 2144, 2161, 2178, 2195, 2212, 2229, 2247, 2265, 2282, 2300, 2318, 2336, 2355, 2373, 2392, 2411, 2429, 2449, 2468, 2487, 2507, 2526, 2546, 2566, 2586, 2607, 2627, 2648, 2668, 2689, 2710, 2732, 2753, 2775, 2796, 2818, 2840, 2863, 2885, 2908, 2931, 2954, 2977, 3000, 3024, 3047, 3071, 3095, 3120, 3144, 3169, 3194, 3219, 3244, 3269, 3295, 3321, 3347, 3373, 3400, 3426, 3453, 3480, 3508, 3535, 3563, 3591, 3619, 3647, 3676, 3705, 3734, 3763, 3793, 3822, 3852, 3883, 3913, 3944, 3975, 4006, 4037, 4069, 4101, 4133, 4165, 4198, 4231, 4264, 4298, 4331, 4365, 4400, 4434, 4469, 4504, 4539, 4575, 4611, 4647, 4683, 4720, 4757, 4795, 4832, 4870, 4908, 4947, 4986, 5025, 5064, 5104, 5144, 5184, 5225, 5266, 5307, 5349, 5391, 5433, 5476, 5519, 5562, 5605, 5649, 5694, 5738, 5783, 5829, 5874, 5921, 5967, 6014, 6061, 6109, 6156, 6205, 6253, 6302, 6352, 6402, 6452, 6503, 6554, 6605, 6657, 6709, 6762, 6815, 6868, 6922, 6976, 7031, 7086, 7142, 7198, 7254, 7311, 7368, 7426, 7484, 7543, 7602, 7662, 7722, 7783, 7844, 7905, 7967, 8030, 8093, 8156, 8220, 8285, 8350, 8415, 8481, 8548, 8615, 8682, 8750, 8819, 8888, 8958, 9028, 9099, 9170, 9242, 9315, 9388, 9461, 9536, 9610, 9686, 9762, 9838, 9915, 9993, 10072, 10151, 10230, 10310, 10391, 10473, 10555, 10638, 10721, 10805, 10890, 10975, 11061, 11148, 11236, 11324, 11413, 11502, 11592, 11683, 11775, 11867, 11960, 12054, 12149, 12244, 12340, 12437, 12534, 12633, 12732, 12832, 12932, 13034, 13136, 13239, 13343, 13447, 13553, 13659, 13766, 13874, 13983, 14093, 14203, 14315, 14427, 14540, 14654, 14769, 14885, 15002, 15119, 15238, 15358, 15478, 15599, 15722, 15845, 15969, 16095, 16221, 16348, 16476, 16606, 16736, 16867, 16999, 17133, 17267, 17402, 17539, 17677, 17815, 17955, 18096, 18238, 18381, 18525, 18670, 18817, 18964, 19113, 19263, 19414, 19566, 19720, 19874, 20030, 20187, 20346, 20505, 20666, 20828, 20991, 21156, 21322, 21489, 21658, 21828, 21999, 22171, 22345, 22521, 22697, 22875, 23055, 23235, 23418, 23601, 23787, 23973, 24161, 24351, 24542, 24734, 24928, 25124, 25321, 25519, 25719, 25921, 26124, 26329, 26536, 26744, 26954, 27165, 27378, 27593, 27809, 28027, 28247, 28469, 28692, 28917, 29144, 29373, 29603, 29835, 30069, 30305, 30543, 30782, 31024, 31267, 31512, 31759, 32008, 32259, 32512, 32768, 32768, };
+
+  long sum_table[8193] =
+  {};
+
+
+
+private:
+
+  static_vector<Pel, NN_MAX_BOUNDARY_SIZE> m_refSamplesY;
+  static_vector<Pel, NN_MAX_BOUNDARY_SIZE> m_refSamplesCb;
+  static_vector<Pel, NN_MAX_BOUNDARY_SIZE> m_refSamplesCr;
+  static_vector<long, NN_MAX_OUTPUT_SAMPLES> m_collocatedSamplesY;
+
+  static_vector<long, NN_MAX_BOUNDARY_SIZE * NN_MAX_CHANNEL_SIZE> m_boundary1Pred;
+  static_vector<long, NN_MAX_OUTPUT_SAMPLES> m_padCollocatedSamplesY;
+  static_vector<long, NN_MAX_OUTPUT_SAMPLES * NN_MAX_CHANNEL_SIZE> m_inputPatchesY;
+  static_vector<long, NN_MAX_OUTPUT_SAMPLES * NN_MAX_CHANNEL_SIZE> m_padAttPred;
+
+  static_vector<long, NN_MAX_BOUNDARY_SIZE * NN_MAX_CHANNEL_SIZE> m_attbPred;
+  static_vector<long, NN_MAX_BOUNDARY_SIZE * NN_MAX_CHANNEL_SIZE> m_attxPred;
+  static_vector<long, NN_MAX_OUTPUT_SAMPLES * NN_MAX_CHANNEL_SIZE> m_attx1Pred;
+  static_vector<long, NN_MAX_OUTPUT_SAMPLES> m_attSoftmax;
+  static_vector<long, NN_MAX_BOUNDARY_SIZE * NN_MAX_OUTPUT_SAMPLES> m_preAttMap;
+  static_vector<long, NN_MAX_BOUNDARY_SIZE * NN_MAX_OUTPUT_SAMPLES> m_attMap;
+
+  Size m_blockSize;
+  Size m_bound1Size;
+  Size m_bound2Size;
+  Size m_lumaSize;
+  Size m_attbSize;
+  Size m_attxSize;
+  Size m_attx1Size;
+  Size m_attMapSize;
+
+  void initPredBlockParams(const Size& block);
+};
+#endif
diff --git a/source/Lib/CommonLib/TypeDef.h b/source/Lib/CommonLib/TypeDef.h
index 1363c31..c5ba6bb 100644
--- a/source/Lib/CommonLib/TypeDef.h
+++ b/source/Lib/CommonLib/TypeDef.h
@@ -50,6 +50,12 @@
 #include <assert.h>
 #include <cassert>
 
+#define NN_CHROMA_PRED                                    1 // NN Intra Chroma Prediction
+#if NN_CHROMA_PRED
+#define NN_CHROMA_PRED_SIGNAL                             1 // NN Intra Chroma Prediction
+#define NN_CHROMA_PRED_SIGNAL_SEPARATE                    1
+#define NN_CHROMA_PRED_SIGNAL_REPLACE_TL                  0
+#endif
 #define RETRAIN_CABAC                                     1 // Retrained CABAC probabilities
 
 #define JVET_P01034_PRED_1D_SCALING_LIST                  1 // JVET-P1034: 1D Scaling list index and add predictor mode
diff --git a/source/Lib/CommonLib/UnitTools.cpp b/source/Lib/CommonLib/UnitTools.cpp
index 2e198dc..b7d6f32 100644
--- a/source/Lib/CommonLib/UnitTools.cpp
+++ b/source/Lib/CommonLib/UnitTools.cpp
@@ -550,7 +550,12 @@ void PU::getIntraChromaCandModes( const PredictionUnit &pu, unsigned modeList[NU
     modeList[4] = LM_CHROMA_IDX;
     modeList[5] = MDLM_L_IDX;
     modeList[6] = MDLM_T_IDX;
+#if NN_CHROMA_PRED_SIGNAL
+    modeList[7] = LM_CHROMA_NN;
+    modeList[8] = DM_CHROMA_IDX;
+#else
     modeList[7] = DM_CHROMA_IDX;
+#endif
 
     const uint32_t lumaMode = getCoLocatedIntraLumaMode(pu);
     for( int i = 0; i < 4; i++ )
@@ -564,9 +569,27 @@ void PU::getIntraChromaCandModes( const PredictionUnit &pu, unsigned modeList[NU
   }
 }
 
+#if NN_CHROMA_PRED_SIGNAL
+bool PU::isLMCNNenabled(const PredictionUnit &pu)
+{
+  CompArea areaCb = pu.Cb();
+  bool lmChromaNnEnabled = true;
+  if (!((areaCb.width == 4 && areaCb.height == 4) || (areaCb.width == 8 && areaCb.height == 8) || (areaCb.width == 16 && areaCb.height == 16)))
+  {
+    lmChromaNnEnabled = false;
+  }
+
+  return lmChromaNnEnabled;
+}
+#endif
+
 bool PU::isLMCMode(unsigned mode)
 {
+#if NN_CHROMA_PRED_SIGNAL
+  return (mode >= LM_CHROMA_IDX && mode <= LM_CHROMA_NN);
+#else
   return (mode >= LM_CHROMA_IDX && mode <= MDLM_T_IDX);
+#endif
 }
 
 bool PU::isLMCModeEnabled(const PredictionUnit &pu, unsigned mode)
@@ -583,6 +606,9 @@ int PU::getLMSymbolList(const PredictionUnit &pu, int *modeList)
   int idx = 0;
 
   modeList[idx++] = LM_CHROMA_IDX;
+#if NN_CHROMA_PRED_SIGNAL
+  modeList[idx++] = LM_CHROMA_NN;
+#endif
   modeList[idx++] = MDLM_L_IDX;
   modeList[idx++] = MDLM_T_IDX;
   return idx;
diff --git a/source/Lib/CommonLib/UnitTools.h b/source/Lib/CommonLib/UnitTools.h
index c40064f..9a2209b 100644
--- a/source/Lib/CommonLib/UnitTools.h
+++ b/source/Lib/CommonLib/UnitTools.h
@@ -185,6 +185,9 @@ namespace PU
 
   bool isLMCMode                      (                          unsigned mode);
   bool isLMCModeEnabled               (const PredictionUnit &pu, unsigned mode);
+#if NN_CHROMA_PRED_SIGNAL
+  bool isLMCNNenabled(const PredictionUnit &pu);
+#endif
   bool isChromaIntraModeCrossCheckMode(const PredictionUnit &pu);
   void getTriangleMergeCandidates     (const PredictionUnit &pu, MergeCtx &triangleMrgCtx);
   void spanTriangleMotionInfo         (      PredictionUnit &pu, MergeCtx &triangleMrgCtx, const bool splitDir, const uint8_t candIdx0, const uint8_t candIdx1);
diff --git a/source/Lib/DecoderLib/CABACReader.cpp b/source/Lib/DecoderLib/CABACReader.cpp
index 0f7937f..63fa265 100644
--- a/source/Lib/DecoderLib/CABACReader.cpp
+++ b/source/Lib/DecoderLib/CABACReader.cpp
@@ -1478,6 +1478,24 @@ bool CABACReader::intra_chroma_lmc_mode(PredictionUnit& pu)
   int lmModeList[10];
   PU::getLMSymbolList(pu, lmModeList);
 
+#if NN_CHROMA_PRED_SIGNAL
+  bool lmChromaNnEnabled = PU::isLMCNNenabled(pu);
+#if NN_CHROMA_PRED_SIGNAL_SEPARATE
+  lmChromaNnEnabled = false;
+#endif
+
+  if (lmChromaNnEnabled)
+  {
+#if NN_CHROMA_PRED_SIGNAL_REPLACE_TL
+    int symbol = m_BinDecoder.decodeBin(Ctx::CclmModeIdx(0)) ? 1 : 0;
+#else
+    int symbol = m_BinDecoder.decodeBin(Ctx::CclmModeIdx(0)) ? 2 : 0;
+    symbol += m_BinDecoder.decodeBinEP();
+#endif
+    pu.intraDir[1] = lmModeList[symbol];
+    return true;
+  }
+#endif
 #if JVET_P0615_CHROMAMODE_CLEANUP
   int symbol = m_BinDecoder.decodeBin(Ctx::CclmModeIdx(0));
 #else
@@ -1491,8 +1509,30 @@ bool CABACReader::intra_chroma_lmc_mode(PredictionUnit& pu)
   }
   else
   {
+#if NN_CHROMA_PRED_SIGNAL
+    if (lmChromaNnEnabled)
+    {
+      symbol += m_BinDecoder.decodeBinEP();
+      if (symbol == 1)
+      {
+        pu.intraDir[1] = lmModeList[symbol];
+      }
+      else
+      {
+        symbol += m_BinDecoder.decodeBinEP();
+        pu.intraDir[1] = lmModeList[symbol];
+      }
+    }
+    else
+    {
+      symbol += m_BinDecoder.decodeBinEP();
+      symbol++;
+      pu.intraDir[1] = lmModeList[symbol];
+    }
+#else
     symbol += m_BinDecoder.decodeBinEP();
     pu.intraDir[1] = lmModeList[symbol];
+#endif
   }
   return true; //it will only enter this function for LMC modes, so always return true ;
 }
@@ -1512,6 +1552,19 @@ void CABACReader::intra_chroma_pred_mode(PredictionUnit& pu)
   }
 #endif
 
+#if NN_CHROMA_PRED_SIGNAL_SEPARATE
+  if (PU::isLMCNNenabled(pu) && pu.cu->checkCCLMAllowed())
+  {
+    bool isLMCNnMode = m_BinDecoder.decodeBin(Ctx::CclmNnModeFlag(0)) ? true : false;
+    if (isLMCNnMode)
+    {
+      pu.intraDir[1] = LM_CHROMA_NN;//intra_chroma_lmc_mode(pu);
+      return;
+    }
+  }
+#endif
+
+
   if (pu.cs->sps->getUseLMChroma() && pu.cu->checkCCLMAllowed())
   {
     bool isLMCMode = m_BinDecoder.decodeBin(Ctx::CclmModeFlag(0)) ? true : false;
diff --git a/source/Lib/DecoderLib/DecCu.cpp b/source/Lib/DecoderLib/DecCu.cpp
index f56cb73..2f8e1db 100644
--- a/source/Lib/DecoderLib/DecCu.cpp
+++ b/source/Lib/DecoderLib/DecCu.cpp
@@ -235,7 +235,25 @@ void DecCu::xIntraRecBlk( TransformUnit& tu, const ComponentID compID )
   {
     const PredictionUnit& pu = *tu.cu->firstPU;
     m_pcIntraPred->xGetLumaRecPixels( pu, area );
-    m_pcIntraPred->predIntraChromaLM( compID, piPred, pu, area, uiChFinalMode );
+#if NN_CHROMA_PRED
+    // Apply NN Intra Chroma prediction only for 8x8 blocks
+#if NN_CHROMA_PRED_SIGNAL
+    if (uiChFinalMode == LM_CHROMA_NN)
+#else
+    if (((area.width == 4 && area.height == 4) || (area.width == 8 && area.height == 8) || (area.width == 16 && area.height == 16)) && uiChFinalMode == LM_CHROMA_IDX)
+#endif
+    {
+      m_pcIntraPred->initIntraPatternChType(*tu.cu, tu.blocks[COMPONENT_Cr]);
+      m_pcIntraPred->initNNIntraChroma(pu, area);
+      m_pcIntraPred->predIntraNN(piPred, piPred, pu, compID, pu.cs->slice->clpRng(compID));
+    }
+    else
+    {
+      m_pcIntraPred->predIntraChromaLM(compID, piPred, pu, area, uiChFinalMode);
+    }
+#else
+    m_pcIntraPred->predIntraChromaLM(compID, piPred, pu, area, uiChFinalMode);
+#endif
   }
   else
   {
diff --git a/source/Lib/EncoderLib/CABACWriter.cpp b/source/Lib/EncoderLib/CABACWriter.cpp
index 7c33444..1e0d0de 100644
--- a/source/Lib/EncoderLib/CABACWriter.cpp
+++ b/source/Lib/EncoderLib/CABACWriter.cpp
@@ -1222,6 +1222,26 @@ void CABACWriter::intra_chroma_lmc_mode(const PredictionUnit& pu)
       break;
     }
   }
+#if NN_CHROMA_PRED_SIGNAL
+  bool lmChromaNnEnabled = PU::isLMCNNenabled(pu);
+#if NN_CHROMA_PRED_SIGNAL_SEPARATE
+  lmChromaNnEnabled = false;
+#endif
+  //we need to get our size. if it is not allowed to do LM NN, we do:
+  if(!lmChromaNnEnabled)
+    symbol = symbol? symbol - 1 : symbol;
+  else
+  {
+#if NN_CHROMA_PRED_SIGNAL_REPLACE_TL
+    m_BinEncoder.encodeBin(symbol == 0 ? 0 : 1, Ctx::CclmModeIdx(0));
+#else
+    m_BinEncoder.encodeBin(symbol <= 1 ? 0 : 1, Ctx::CclmModeIdx(0));
+    unsigned int second_bin = (symbol == 1 || symbol == 3);
+    m_BinEncoder.encodeBinEP(second_bin);
+#endif
+    return;
+  }
+#endif
   CHECK(symbol < 0, "invalid symbol found");
 
 #if JVET_P0615_CHROMAMODE_CLEANUP
@@ -1232,9 +1252,29 @@ void CABACWriter::intra_chroma_lmc_mode(const PredictionUnit& pu)
 
   if (symbol > 0)
   {
+#if NN_CHROMA_PRED_SIGNAL
+    if (lmChromaNnEnabled)
+    {
+      CHECK(symbol > 3, "invalid symbol for MMLM");
+      unsigned int symbol_minus_1 = symbol - 1;
+      m_BinEncoder.encodeBinEP(symbol_minus_1);
+      if (symbol_minus_1)
+      {
+        unsigned int symbol_minus_2 = symbol - 2;
+        m_BinEncoder.encodeBinEP(symbol_minus_2);
+      }
+    }
+    else
+    {
+      CHECK(symbol > 2, "invalid symbol for MMLM");
+      unsigned int symbol_minus_1 = symbol - 1;
+      m_BinEncoder.encodeBinEP(symbol_minus_1);
+    }
+#else
     CHECK(symbol > 2, "invalid symbol for MMLM");
     unsigned int symbol_minus_1 = symbol - 1;
     m_BinEncoder.encodeBinEP(symbol_minus_1);
+#endif
   }
 }
 
@@ -1249,10 +1289,27 @@ void CABACWriter::intra_chroma_pred_mode(const PredictionUnit& pu)
 #endif
 
   const unsigned intraDir = pu.intraDir[1];
+#if NN_CHROMA_PRED_SIGNAL_SEPARATE
+  if (PU::isLMCNNenabled(pu) && pu.cu->checkCCLMAllowed())
+  {
+    bool isLMCNnMode = (pu.intraDir[1] == LM_CHROMA_NN);
+    m_BinEncoder.encodeBin(isLMCNnMode ? 1 : 0, Ctx::CclmNnModeFlag(0));
+    if (isLMCNnMode)
+    {
+      return;
+    }
+  }
+#endif
   if (pu.cs->sps->getUseLMChroma() && pu.cu->checkCCLMAllowed())
   {
+#if NN_CHROMA_PRED_SIGNAL_SEPARATE
+    bool isCCLM = PU::isLMCMode(intraDir) && !(pu.intraDir[1] == LM_CHROMA_NN);
+    m_BinEncoder.encodeBin(isCCLM ? 1 : 0, Ctx::CclmModeFlag(0));
+    if (isCCLM)
+#else
     m_BinEncoder.encodeBin(PU::isLMCMode(intraDir) ? 1 : 0, Ctx::CclmModeFlag(0));
     if (PU::isLMCMode(intraDir))
+#endif
     {
       intra_chroma_lmc_mode(pu);
       return;
diff --git a/source/Lib/EncoderLib/EncModeCtrl.cpp b/source/Lib/EncoderLib/EncModeCtrl.cpp
index 56da31c..cc87786 100644
--- a/source/Lib/EncoderLib/EncModeCtrl.cpp
+++ b/source/Lib/EncoderLib/EncModeCtrl.cpp
@@ -1452,6 +1452,23 @@ bool EncModeCtrlMTnoRQT::tryMode( const EncTestMode& encTestmode, const CodingSt
     return false;
   }
 
+
+  
+  // Modification: Only square CUs
+  if (partitioner.currArea().lumaSize().width != partitioner.currArea().lumaSize().height)
+  {
+    return false;
+  }
+
+  // Modification: Only square CUs
+  if (partitioner.currArea().lumaSize().width > 32 && partitioner.currArea().lumaSize().height > 32)
+  {
+    return encTestmode.type == ETM_SPLIT_QT;
+  }
+    
+
+  
+
   const PartSplit implicitSplit = partitioner.getImplicitSplit( cs );
   const bool isBoundary         = implicitSplit != CU_DONT_SPLIT;
 
diff --git a/source/Lib/EncoderLib/IntraSearch.cpp b/source/Lib/EncoderLib/IntraSearch.cpp
index 1169828..0dc32d4 100644
--- a/source/Lib/EncoderLib/IntraSearch.cpp
+++ b/source/Lib/EncoderLib/IntraSearch.cpp
@@ -1418,10 +1418,21 @@ void IntraSearch::estIntraPredChromaQT( CodingUnit &cu, Partitioner &partitioner
         {
           continue;
         }
+#if NN_CHROMA_PRED_SIGNAL
+        if ((mode == LM_CHROMA_IDX) || (mode == LM_CHROMA_NN) || (mode == PLANAR_IDX) || (mode == DM_CHROMA_IDX)) // only pre-check regular modes and MDLM modes, not including DM ,Planar, and LM
+#else
         if ((mode == LM_CHROMA_IDX) || (mode == PLANAR_IDX) || (mode == DM_CHROMA_IDX)) // only pre-check regular modes and MDLM modes, not including DM ,Planar, and LM
+#endif
+        {
+          continue;
+        }
+
+#if NN_CHROMA_PRED_SIGNAL_REPLACE_TL
+        if ((mode == MDLM_L_IDX || mode == MDLM_T_IDX) && PU::isLMCNNenabled(pu))
         {
           continue;
         }
+#endif
         pu.intraDir[1] = mode; // temporary assigned, for SATD checking.
 
 #if JVET_P0058_CHROMA_TS_ENCODER_INTRA_SAD_MOD
@@ -1438,6 +1449,41 @@ void IntraSearch::estIntraPredChromaQT( CodingUnit &cu, Partitioner &partitioner
         CompArea areaCb = pu.Cb();
         PelBuf orgCb = cs.getOrgBuf(areaCb);
         PelBuf predCb = cs.getPredBuf(areaCb);
+        CompArea areaCr = pu.Cr();
+        PelBuf orgCr = cs.getOrgBuf(areaCr);
+        PelBuf predCr = cs.getPredBuf(areaCr);
+
+        if (PU::isLMCMode(mode))
+        {
+          
+#if NN_CHROMA_PRED
+          // Apply NN Intra Chroma prediction only for 8x8 blocks
+#if NN_CHROMA_PRED_SIGNAL
+          if (mode == LM_CHROMA_NN)
+#else
+          if (((areaCb.width == 4 && areaCb.height == 4) || (areaCb.width == 8 && areaCb.height == 8) || (areaCb.width == 16 && areaCb.height == 16)) && mode == LM_CHROMA_IDX)
+#endif
+          {
+            initNNIntraChroma(pu, areaCr);
+            predIntraNN(predCb, predCr, pu, COMPONENT_Y, pu.cs->slice->clpRng(COMPONENT_Cb));
+          }
+          else
+          {
+            predIntraChromaLM(COMPONENT_Cb, predCb, pu, areaCb, mode);
+            predIntraChromaLM(COMPONENT_Cr, predCr, pu, areaCr, mode);
+          }
+#else
+          predIntraChromaLM(COMPONENT_Cb, predCb, pu, areaCb, mode);
+          predIntraChromaLM(COMPONENT_Cr, predCr, pu, areaCr, mode);
+#endif
+        }
+        else
+        {
+          initPredIntraParams(pu, pu.Cb(), *pu.cs->sps);
+          predIntraAng(COMPONENT_Cb, predCb, pu);
+          initPredIntraParams(pu, pu.Cr(), *pu.cs->sps);
+          predIntraAng(COMPONENT_Cr, predCr, pu);
+        }
 #if JVET_P0058_CHROMA_TS_ENCODER_INTRA_SAD_MOD
         m_pcRdCost->setDistParam(distParamSad, orgCb, predCb, pu.cs->sps->getBitDepth(CHANNEL_TYPE_CHROMA), COMPONENT_Cb, false);
         m_pcRdCost->setDistParam(distParamSatd, orgCb, predCb, pu.cs->sps->getBitDepth(CHANNEL_TYPE_CHROMA), COMPONENT_Cb, true);
@@ -1450,15 +1496,6 @@ void IntraSearch::estIntraPredChromaQT( CodingUnit &cu, Partitioner &partitioner
 #else
         distParam.applyWeight = false;
 #endif
-        if (PU::isLMCMode(mode))
-        {
-          predIntraChromaLM(COMPONENT_Cb, predCb, pu, areaCb, mode);
-        }
-        else
-        {
-          initPredIntraParams(pu, pu.Cb(), *pu.cs->sps);
-          predIntraAng(COMPONENT_Cb, predCb, pu);
-        }
 #if JVET_P0058_CHROMA_TS_ENCODER_INTRA_SAD_MOD
         sadCb = distParamSad.distFunc(distParamSad) * 2;
         satdCb = distParamSatd.distFunc(distParamSatd);
@@ -1466,9 +1503,6 @@ void IntraSearch::estIntraPredChromaQT( CodingUnit &cu, Partitioner &partitioner
 #else
         sad += distParam.distFunc(distParam);
 #endif
-        CompArea areaCr = pu.Cr();
-        PelBuf orgCr = cs.getOrgBuf(areaCr);
-        PelBuf predCr = cs.getPredBuf(areaCr);
 #if JVET_P0058_CHROMA_TS_ENCODER_INTRA_SAD_MOD
         m_pcRdCost->setDistParam(distParamSad, orgCr, predCr, pu.cs->sps->getBitDepth(CHANNEL_TYPE_CHROMA), COMPONENT_Cr, false);
         m_pcRdCost->setDistParam(distParamSatd, orgCr, predCr, pu.cs->sps->getBitDepth(CHANNEL_TYPE_CHROMA), COMPONENT_Cr, true);
@@ -1481,15 +1515,6 @@ void IntraSearch::estIntraPredChromaQT( CodingUnit &cu, Partitioner &partitioner
 #else
         distParam.applyWeight = false;
 #endif
-        if (PU::isLMCMode(mode))
-        {
-          predIntraChromaLM(COMPONENT_Cr, predCr, pu, areaCr, mode);
-        }
-        else
-        {
-          initPredIntraParams(pu, pu.Cr(), *pu.cs->sps);
-          predIntraAng(COMPONENT_Cr, predCr, pu);
-        }
 #if JVET_P0058_CHROMA_TS_ENCODER_INTRA_SAD_MOD
         sadCr = distParamSad.distFunc(distParamSad) * 2;
         satdCr = distParamSatd.distFunc(distParamSatd);
@@ -1559,6 +1584,19 @@ void IntraSearch::estIntraPredChromaQT( CodingUnit &cu, Partitioner &partitioner
         {
           continue;
         }
+#if NN_CHROMA_PRED_SIGNAL
+        if (chromaIntraMode == LM_CHROMA_NN && !PU::isLMCNNenabled(pu))
+        {
+          continue;
+        }
+
+#if NN_CHROMA_PRED_SIGNAL_REPLACE_TL
+        if ((chromaIntraMode == MDLM_L_IDX || chromaIntraMode == MDLM_T_IDX) && PU::isLMCNNenabled(pu))
+        {
+          continue;
+        }
+#endif
+#endif
 #if JVET_P0059_CHROMA_BDPCM
         }
 #endif
@@ -3242,9 +3280,27 @@ void IntraSearch::xIntraCodingTUBlock(TransformUnit &tu, const ComponentID &comp
 #endif
     {
       {
+        initIntraPatternChType(*tu.cu, tu.blocks[COMPONENT_Cr]);
         xGetLumaRecPixels( pu, area );
       }
+#if NN_CHROMA_PRED
+      // Apply NN Intra Chroma prediction only for 8x8 blocks
+#if NN_CHROMA_PRED_SIGNAL
+      if(uiChFinalMode == LM_CHROMA_NN)
+#else
+      if (((area.width == 4 && area.height == 4) || (area.width == 8 && area.height == 8) || (area.width == 16 && area.height == 16)) && uiChFinalMode == LM_CHROMA_IDX)
+#endif
+      {
+        initNNIntraChroma(pu, area);
+        predIntraNN(piPred, piPred, pu, compID, pu.cs->slice->clpRng(compID));
+      }
+      else
+      {
+        predIntraChromaLM(compID, piPred, pu, area, uiChFinalMode);
+      }
+#else
       predIntraChromaLM( compID, piPred, pu, area, uiChFinalMode );
+#endif
     }
     else
     {
@@ -4312,16 +4368,39 @@ ChromaCbfs IntraSearch::xRecurIntraChromaCodingQT( CodingStructure &cs, Partitio
 
     if( PU::isLMCMode( predMode ) )
     {
-      xGetLumaRecPixels( pu, cbArea );
-      predIntraChromaLM( COMPONENT_Cb, piPredCb, pu, cbArea, predMode );
-      predIntraChromaLM( COMPONENT_Cr, piPredCr, pu, crArea, predMode );
+      xGetLumaRecPixels(pu, cbArea);
+#if NN_CHROMA_PRED
+      // Apply NN Intra Chroma prediction only for 8x8 blocks
+#if NN_CHROMA_PRED_SIGNAL
+      if (predMode == LM_CHROMA_NN)
+#else
+      if (((cbArea.width == 4 && cbArea.height == 4) || (cbArea.width == 8 && cbArea.height == 8) || (cbArea.width == 16 && cbArea.height == 16)) && predMode == LM_CHROMA_IDX)
+#endif
+      {
+        initNNIntraChroma(pu, crArea);
+        predIntraNN(piPredCb, piPredCr, pu, COMPONENT_Y, pu.cs->slice->clpRng(COMPONENT_Cb));
+      }
+      else
+      {
+        predIntraChromaLM(COMPONENT_Cb, piPredCb, pu, cbArea, predMode);
+        predIntraChromaLM(COMPONENT_Cr, piPredCr, pu, crArea, predMode);
+      }
     }
     else
     {
-      predIntraAng( COMPONENT_Cb, piPredCb, pu);
-      predIntraAng( COMPONENT_Cr, piPredCr, pu);
+      predIntraAng(COMPONENT_Cb, piPredCb, pu);
+      predIntraAng(COMPONENT_Cr, piPredCr, pu);
     }
-
+#else
+      predIntraChromaLM(COMPONENT_Cb, piPredCb, pu, cbArea, predMode);
+      predIntraChromaLM(COMPONENT_Cr, piPredCr, pu, crArea, predMode);
+    }
+    else
+    {
+      predIntraAng(COMPONENT_Cb, piPredCb, pu);
+      predIntraAng(COMPONENT_Cr, piPredCr, pu);
+    }
+#endif
     // determination of chroma residuals including reshaping and cross-component prediction
     //----- get chroma residuals -----
     PelBuf resiCb  = cs.getResiBuf(cbArea);
